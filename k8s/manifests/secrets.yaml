# Production-ready Kubernetes Secrets Configuration
# This configuration provides multi-environment secret management
# with proper RBAC, rotation automation, and security compliance

apiVersion: v1
kind: Secret
metadata:
  name: ai-pdf-scholar-secrets
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: secrets
    app.kubernetes.io/version: "2.1.0"
    environment: production
    rotation.secrets.io/enabled: "true"
    compliance.security.io/standards: "nist-800-53,iso-27001,soc2"
  annotations:
    secrets.kubernetes.io/description: "Production secrets for AI PDF Scholar"
    secrets.kubernetes.io/created-by: "secrets-management-system"
    secrets.kubernetes.io/rotation-schedule: "90d"
    secrets.kubernetes.io/last-rotated: "2025-01-01T00:00:00Z"
    secrets.kubernetes.io/encryption-algorithm: "AES-256-GCM"
    compliance.security.io/classification: "restricted"
    backup.secrets.io/enabled: "true"
type: Opaque
stringData:
  # Database Credentials (Rotated every 90 days)
  POSTGRES_USER: "ai_pdf_scholar_prod"
  POSTGRES_PASSWORD: "GENERATED_SECURE_PASSWORD_32_CHARS"
  POSTGRES_CONNECTION_POOL_SIZE: "20"
  
  # Redis Authentication (Rotated every 90 days)
  REDIS_PASSWORD: "GENERATED_REDIS_PASSWORD_32_CHARS"
  REDIS_CONNECTION_TIMEOUT: "10"
  
  # JWT Secrets (Rotated every 180 days)
  JWT_SECRET_KEY: "GENERATED_JWT_SECRET_256_BITS_BASE64"
  JWT_REFRESH_SECRET_KEY: "GENERATED_REFRESH_SECRET_256_BITS"
  JWT_ACCESS_TOKEN_EXPIRE_HOURS: "24"
  JWT_REFRESH_TOKEN_EXPIRE_DAYS: "30"
  
  # Encryption Keys (Master key rotated yearly)
  MASTER_ENCRYPTION_KEY: "GENERATED_MASTER_KEY_512_BITS_BASE64"
  DATA_ENCRYPTION_KEY: "GENERATED_DATA_KEY_256_BITS_BASE64"
  FIELD_ENCRYPTION_KEY: "GENERATED_FIELD_KEY_256_BITS_BASE64"
  
  # External API Keys (Rotated every 90 days)
  GOOGLE_API_KEY: "AIzaSyD_REPLACE_WITH_ACTUAL_GEMINI_KEY"
  
  # Monitoring & Observability Keys
  DATADOG_API_KEY: "GENERATED_DATADOG_KEY_IF_USED"
  PROMETHEUS_BASIC_AUTH: "GENERATED_PROMETHEUS_AUTH"
  
  # SMTP Credentials (Rotated every 120 days)
  SMTP_USERNAME: "noreply@your-domain.com"
  SMTP_PASSWORD: "GENERATED_SMTP_APP_PASSWORD"
  SMTP_HOST: "smtp.your-provider.com"
  SMTP_PORT: "587"
  
  # Session & CSRF Protection
  SESSION_SECRET: "GENERATED_SESSION_SECRET_256_BITS"
  CSRF_SECRET: "GENERATED_CSRF_SECRET_256_BITS"
  
  # HashiCorp Vault Integration (if enabled)
  VAULT_TOKEN: "hvs.GENERATED_VAULT_TOKEN_FOR_ROTATION"
  VAULT_ADDR: "https://vault.your-domain.com"
  VAULT_NAMESPACE: "ai-pdf-scholar"
  
  # AWS Secrets Manager (alternative)
  AWS_SECRETS_MANAGER_REGION: "us-east-1"
  AWS_SECRETS_MANAGER_PREFIX: "ai-pdf-scholar/prod"
  
  # Security & Compliance
  AUDIT_LOG_SIGNING_KEY: "GENERATED_AUDIT_SIGNING_KEY_256"
  WEBHOOK_SECRET: "GENERATED_WEBHOOK_SECRET_256_BITS"
  
  # Backup Encryption
  BACKUP_ENCRYPTION_KEY: "GENERATED_BACKUP_KEY_256_BITS"
  BACKUP_SIGNING_KEY: "GENERATED_BACKUP_SIGNING_KEY"
---
# TLS Certificates for Production
apiVersion: v1
kind: Secret
metadata:
  name: ai-pdf-scholar-tls
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: tls
    app.kubernetes.io/version: "2.1.0"
    certificate.security.io/type: "production"
    certificate.security.io/issuer: "lets-encrypt"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/common-name: "pdf-scholar.your-domain.com"
    cert-manager.io/alt-names: "api.pdf-scholar.your-domain.com,admin.pdf-scholar.your-domain.com"
    certificate.security.io/expiry-date: "2025-12-31T23:59:59Z"
    certificate.security.io/auto-renewal: "true"
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t... # Production TLS certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t... # Production private key
---
# PostgreSQL Production Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secrets
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "15.5"
    environment: production
    rotation.secrets.io/enabled: "true"
    database.security.io/encrypted: "true"
  annotations:
    secrets.kubernetes.io/description: "PostgreSQL production credentials"
    secrets.kubernetes.io/rotation-schedule: "90d"
    secrets.kubernetes.io/last-rotated: "2025-01-01T00:00:00Z"
    database.security.io/ssl-mode: "require"
    backup.database.io/enabled: "true"
type: Opaque
stringData:
  # PostgreSQL Superuser (Rotated every 180 days)
  postgres-password: "GENERATED_POSTGRES_SUPERUSER_PASSWORD_32"
  
  # Application Database User (Rotated every 90 days)
  username: "ai_pdf_scholar_prod"
  password: "GENERATED_APP_DATABASE_PASSWORD_32"
  
  # Replication User (Rotated every 90 days)
  replication-username: "replicator_prod"
  replication-password: "GENERATED_REPLICATION_PASSWORD_32"
  
  # Read-only User for Analytics (Rotated every 90 days)
  readonly-username: "analytics_reader"
  readonly-password: "GENERATED_READONLY_PASSWORD_32"
  
  # Database Connection Parameters
  database: "ai_pdf_scholar_prod"
  port: "5432"
  ssl-mode: "require"
  connection-timeout: "30"
  max-connections: "100"
---
# Redis Production Secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    environment: production
    rotation.secrets.io/enabled: "true"
  annotations:
    secrets.kubernetes.io/description: "Redis production credentials"
    secrets.kubernetes.io/rotation-schedule: "90d"
    cache.security.io/tls-enabled: "true"
type: Opaque
stringData:
  # Redis Authentication (Rotated every 90 days)
  redis-password: "GENERATED_REDIS_AUTH_PASSWORD_32"
  redis-username: "default"  # Redis 6+ ACL username
  
  # Redis Sentinel (for HA setup)
  sentinel-password: "GENERATED_SENTINEL_PASSWORD_32"
  sentinel-username: "sentinel"
  
  # Connection Parameters
  redis-host: "redis-cluster.ai-pdf-scholar.svc.cluster.local"
  redis-port: "6379"
  redis-tls-port: "6380"
  sentinel-port: "26379"
---
# External Service Integration Secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-services-secrets
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: external-integrations
    environment: production
    rotation.secrets.io/enabled: "true"
  annotations:
    secrets.kubernetes.io/description: "External service API keys and tokens"
    secrets.kubernetes.io/rotation-schedule: "90d"
type: Opaque
stringData:
  # Google Cloud APIs (Rotated every 90 days)
  google-service-account-key: |
    {
      "type": "service_account",
      "project_id": "your-gcp-project",
      "private_key_id": "GENERATED_KEY_ID",
      "private_key": "-----BEGIN PRIVATE KEY-----\nGENERATED_PRIVATE_KEY\n-----END PRIVATE KEY-----\n",
      "client_email": "ai-pdf-scholar@your-project.iam.gserviceaccount.com",
      "client_id": "GENERATED_CLIENT_ID",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token"
    }
  
  # AWS Credentials (if using AWS services)
  aws-access-key-id: "AKIA_GENERATED_ACCESS_KEY"
  aws-secret-access-key: "GENERATED_SECRET_ACCESS_KEY_40_CHARS"
  
  # Monitoring & Alerting
  slack-webhook-url: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
  pagerduty-integration-key: "GENERATED_PAGERDUTY_KEY"
  
  # Email Service (SendGrid, SES, etc.)
  sendgrid-api-key: "SG.GENERATED_SENDGRID_API_KEY"
  
  # Object Storage (S3, GCS, etc.)
  s3-bucket-name: "ai-pdf-scholar-prod-storage"
  s3-region: "us-east-1"
---
# Secrets Management System Configuration
apiVersion: v1
kind: Secret
metadata:
  name: secrets-manager-config
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: secrets-management
    environment: production
  annotations:
    secrets.kubernetes.io/description: "Secrets management system configuration"
    secrets.kubernetes.io/immutable: "true"
type: Opaque
stringData:
  # Encryption Configuration
  encryption-algorithm: "aes_256_gcm"
  key-derivation-function: "scrypt"
  master-key-rotation-days: "365"
  secret-rotation-days: "90"
  
  # Audit Configuration
  audit-log-retention-days: "2555"  # 7 years for compliance
  audit-log-encryption: "true"
  audit-log-signing: "true"
  
  # Compliance Configuration
  compliance-standards: "nist-800-53,iso-27001,soc2-type2"
  security-scanning: "enabled"
  vulnerability-monitoring: "enabled"
  
  # Backup Configuration
  backup-schedule: "0 2 * * *"  # Daily at 2 AM
  backup-retention-days: "90"
  backup-encryption-key: "GENERATED_BACKUP_ENCRYPTION_KEY"
  
  # Monitoring Configuration
  health-check-interval: "30s"
  metrics-collection: "enabled"
  alerting-enabled: "true"
---
# RBAC for Secrets Management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ai-pdf-scholar
  name: secrets-manager-role
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: rbac-secrets
  annotations:
    rbac.authorization.k8s.io/description: "Role for secrets management operations"
rules:
# Secrets access
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
  resourceNames: 
    - "ai-pdf-scholar-secrets"
    - "postgresql-secrets"
    - "redis-secrets"
    - "external-services-secrets"
    - "secrets-manager-config"
# ConfigMaps for non-sensitive config
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
# Events for audit logging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secrets-manager-binding
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: rbac-secrets
  annotations:
    rbac.authorization.k8s.io/description: "Binding for secrets management service account"
subjects:
- kind: ServiceAccount
  name: secrets-manager-sa
  namespace: ai-pdf-scholar
roleRef:
  kind: Role
  name: secrets-manager-role
  apiGroup: rbac.authorization.k8s.io
---
# Service Account for Secrets Management
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-manager-sa
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: secrets-management
  annotations:
    secrets.kubernetes.io/description: "Service account for automated secrets management"
    iam.gke.io/gcp-service-account: "ai-pdf-scholar-secrets@your-project.iam.gserviceaccount.com"
automountServiceAccountToken: true
---
# NetworkPolicy for Secrets Management (restrict access)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-management-netpol
  namespace: ai-pdf-scholar
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: network-policy
  annotations:
    network.security.io/description: "Network policy for secrets management security"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: secrets-management
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow ingress from application pods
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ai-pdf-scholar
    ports:
    - protocol: TCP
      port: 8080  # Health check endpoint
  egress:
  # Allow egress to external secret stores (Vault, AWS Secrets Manager)
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
    - protocol: TCP
      port: 8200  # HashiCorp Vault default port
  # Allow egress to Kubernetes API server
  - to: []
    ports:
    - protocol: TCP
      port: 6443  # Kubernetes API
---
# PodSecurityPolicy for Secrets Management
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: secrets-management-psp
  labels:
    app.kubernetes.io/name: ai-pdf-scholar
    app.kubernetes.io/component: pod-security
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'secret'
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'downwardAPI'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
    ranges:
      - min: 1000
        max: 65535
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'