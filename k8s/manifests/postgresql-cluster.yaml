# PostgreSQL High Availability Cluster for AI Enhanced PDF Scholar
# Multi-node PostgreSQL deployment with primary-replica configuration
# for high performance and reliability

apiVersion: v1
kind: Namespace
metadata:
  name: pdf-scholar-db
  labels:
    app: pdf-scholar
    component: database

---
# PostgreSQL Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: pdf-scholar-db
  labels:
    app: postgresql
    component: database
data:
  # Primary PostgreSQL configuration
  postgresql.conf: |
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_preload_libraries = 'pg_stat_statements,auto_explain'

    # Memory settings optimized for performance
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB

    # WAL settings for replication
    wal_level = replica
    max_wal_senders = 5
    max_replication_slots = 5
    wal_keep_segments = 64
    hot_standby = on

    # Performance settings
    checkpoint_completion_target = 0.7
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200

    # Query optimization
    enable_hashjoin = on
    enable_mergejoin = on
    enable_nestloop = on
    enable_seqscan = on
    enable_indexscan = on
    enable_indexonlyscan = on

    # Logging for performance monitoring
    log_min_duration_statement = 100
    log_statement = 'none'
    log_duration = off
    log_line_prefix = '%t [%p-%l] %q%u@%d '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0

    # Statistics
    track_activities = on
    track_counts = on
    track_functions = all
    track_io_timing = on

  # Replica-specific configuration
  postgresql-replica.conf: |
    # All primary settings plus replica-specific
    hot_standby = on
    max_standby_streaming_delay = 30s
    max_standby_archive_delay = 30s
    hot_standby_feedback = on
    wal_receiver_status_interval = 10s
    wal_retrieve_retry_interval = 5s

  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5
    # Replication connections
    host    replication     replication     0.0.0.0/0               md5

  # Database initialization script
  init-database.sql: |
    -- Create database for PDF Scholar
    CREATE DATABASE pdf_scholar;

    -- Create replication user
    CREATE USER replication WITH REPLICATION PASSWORD 'replica_secure_password_2024';

    -- Create application user
    CREATE USER pdf_scholar_app WITH PASSWORD 'app_secure_password_2024';
    GRANT ALL PRIVILEGES ON DATABASE pdf_scholar TO pdf_scholar_app;

    -- Performance extensions
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
    CREATE EXTENSION IF NOT EXISTS btree_gin;
    CREATE EXTENSION IF NOT EXISTS btree_gist;

---
# PostgreSQL Primary Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql-primary
  namespace: pdf-scholar-db
  labels:
    app: postgresql
    role: primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql
  selector:
    app: postgresql
    role: primary

---
# PostgreSQL Read-Only Service (Load balanced across replicas)
apiVersion: v1
kind: Service
metadata:
  name: postgresql-readonly
  namespace: pdf-scholar-db
  labels:
    app: postgresql
    role: replica
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql
  selector:
    app: postgresql
    role: replica

---
# PostgreSQL Primary StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-primary
  namespace: pdf-scholar-db
  labels:
    app: postgresql
    role: primary
spec:
  serviceName: postgresql-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: primary
  template:
    metadata:
      labels:
        app: postgresql
        role: primary
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
      - name: init-primary
        image: postgres:15-alpine
        command: ['/bin/bash', '-c']
        args:
        - |
          set -ex
          # Initialize primary database if not exists
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            initdb --auth-host=md5 --auth-local=trust --username=postgres
            echo "Primary database initialized"
          fi
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: pdf_scholar
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: postgresql-config
          mountPath: /docker-entrypoint-initdb.d/init-database.sql
          subPath: init-database.sql
        command: ['postgres']
        args: ['-c', 'config_file=/etc/postgresql/postgresql.conf']
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ssd-storage
      resources:
        requests:
          storage: 50Gi

---
# PostgreSQL Replica StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-replica
  namespace: pdf-scholar-db
  labels:
    app: postgresql
    role: replica
spec:
  serviceName: postgresql-replica
  replicas: 2
  selector:
    matchLabels:
      app: postgresql
      role: replica
  template:
    metadata:
      labels:
        app: postgresql
        role: replica
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
      - name: init-replica
        image: postgres:15-alpine
        command: ['/bin/bash', '-c']
        args:
        - |
          set -ex
          # Initialize replica from primary
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            echo "Initializing replica from primary..."
            PGPASSWORD=$REPLICATION_PASSWORD pg_basebackup \
              -h postgresql-primary.pdf-scholar-db.svc.cluster.local \
              -D /var/lib/postgresql/data \
              -U replication \
              -v -P -W
            echo "standby_mode = 'on'" > /var/lib/postgresql/data/recovery.conf
            echo "primary_conninfo = 'host=postgresql-primary.pdf-scholar-db.svc.cluster.local port=5432 user=replication'" >> /var/lib/postgresql/data/recovery.conf
            echo "trigger_file = '/var/lib/postgresql/data/failover.trigger'" >> /var/lib/postgresql/data/recovery.conf
            echo "Replica initialization completed"
          fi
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: replication-password
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data
        - name: PGUSER
          value: postgres
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql-replica.conf
        - name: postgresql-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        command: ['postgres']
        args: ['-c', 'config_file=/etc/postgresql/postgresql.conf']
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1"
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ssd-storage
      resources:
        requests:
          storage: 50Gi

---
# PostgreSQL Secret (passwords should be generated securely)
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: pdf-scholar-db
  labels:
    app: postgresql
type: Opaque
stringData:
  postgres-password: "secure_postgres_password_2024_change_in_production"
  replication-password: "replica_secure_password_2024"
  app-password: "app_secure_password_2024"

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgresql-pdb
  namespace: pdf-scholar-db
  labels:
    app: postgresql
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgresql

---
# NetworkPolicy for database security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgresql-network-policy
  namespace: pdf-scholar-db
  labels:
    app: postgresql
spec:
  podSelector:
    matchLabels:
      app: postgresql
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: pdf-scholar
    - podSelector:
        matchLabels:
          app: pdf-scholar
    ports:
    - protocol: TCP
      port: 5432
  - from:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ServiceMonitor for Prometheus monitoring (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgresql-monitor
  namespace: pdf-scholar-db
  labels:
    app: postgresql
spec:
  selector:
    matchLabels:
      app: postgresql
  endpoints:
  - port: postgresql
    interval: 30s
    path: /metrics

---
# Horizontal Pod Autoscaler for read replicas
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: postgresql-replica-hpa
  namespace: pdf-scholar-db
  labels:
    app: postgresql
    role: replica
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: postgresql-replica
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Storage Class for high-performance SSD storage
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ssd-storage
  labels:
    app: postgresql
provisioner: kubernetes.io/aws-ebs  # Change based on cloud provider
parameters:
  type: gp3  # High-performance SSD on AWS
  fsType: ext4
  encrypted: "true"
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer

---
# PostgreSQL Connection Pooler (PgBouncer) for connection management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: pdf-scholar-db
  labels:
    app: pgbouncer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - name: pgbouncer
        image: pgbouncer/pgbouncer:1.20.1
        ports:
        - containerPort: 5432
          name: pgbouncer
        env:
        - name: DATABASES_HOST
          value: postgresql-primary.pdf-scholar-db.svc.cluster.local
        - name: DATABASES_PORT
          value: "5432"
        - name: DATABASES_USER
          value: pdf_scholar_app
        - name: DATABASES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: app-password
        - name: DATABASES_DBNAME
          value: pdf_scholar
        - name: POOL_MODE
          value: transaction
        - name: MAX_CLIENT_CONN
          value: "1000"
        - name: DEFAULT_POOL_SIZE
          value: "25"
        - name: SERVER_IDLE_TIMEOUT
          value: "600"
        volumeMounts:
        - name: pgbouncer-config
          mountPath: /etc/pgbouncer
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: pgbouncer-config
        configMap:
          name: pgbouncer-config

---
# PgBouncer Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbouncer-config
  namespace: pdf-scholar-db
  labels:
    app: pgbouncer
data:
  pgbouncer.ini: |
    [databases]
    pdf_scholar = host=postgresql-primary.pdf-scholar-db.svc.cluster.local port=5432 dbname=pdf_scholar

    [pgbouncer]
    listen_addr = 0.0.0.0
    listen_port = 5432
    auth_type = md5
    auth_file = /etc/pgbouncer/userlist.txt
    admin_users = postgres
    stats_users = postgres
    pool_mode = transaction
    max_client_conn = 1000
    default_pool_size = 25
    min_pool_size = 5
    reserve_pool_size = 5
    reserve_pool_timeout = 5
    max_db_connections = 50
    max_user_connections = 50
    server_round_robin = 1
    ignore_startup_parameters = extra_float_digits
    server_idle_timeout = 600
    server_lifetime = 3600
    server_connect_timeout = 15
    server_login_retry = 15
    client_login_timeout = 60
    autodb_idle_timeout = 3600
    dns_max_ttl = 15
    dns_nxdomain_ttl = 15
    dns_zone_check_period = 0
    resolv_conf = /etc/resolv.conf

  userlist.txt: |
    "pdf_scholar_app" "md5hashedpassword"
    "postgres" "md5hashedpassword"

---
# PgBouncer Service
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: pdf-scholar-db
  labels:
    app: pgbouncer
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: pgbouncer
  selector:
    app: pgbouncer