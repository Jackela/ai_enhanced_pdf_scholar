# Ultra-Optimized CI/CD Cache Configuration
# Advanced caching strategies for maximum performance

name: ðŸŽ¯ Cache Configuration & Optimization

# Cache configuration constants
env:
  CACHE_VERSION: 'v3-ultra'
  CACHE_COMPRESSION: 'zstd'
  CACHE_TTL_DAYS: '7'
  CACHE_MAX_SIZE: '5GB'

# Cache strategies by component
cache_strategies:
  # Test Result Caching
  test_results:
    strategy: 'incremental'
    key_pattern: 'test-results-{fingerprint}-{suite}'
    paths:
      - 'test-results-cache/'
      - '.pytest_cache/'
      - '.coverage*'
    ttl: '7d'
    invalidation:
      - 'src/**/*.py'
      - 'tests/**/*.py'
      - 'pytest.ini'
      - '.coveragerc'

  # Build Artifact Caching
  frontend_build:
    strategy: 'component-isolated'
    key_pattern: 'frontend-ultra-{build_key}-{hash}'
    paths:
      - 'frontend/dist'
      - 'frontend/node_modules'
      - 'frontend/.vite'
      - '~/.npm'
    ttl: '30d'
    invalidation:
      - 'frontend/**/*.ts'
      - 'frontend/**/*.tsx'
      - 'frontend/**/*.js'
      - 'frontend/**/*.jsx'
      - 'package*.json'
      - 'vite.config.ts'

  backend_build:
    strategy: 'dependency-aware'
    key_pattern: 'backend-ultra-{build_key}-{hash}'
    paths:
      - '~/.cache/pip'
      - '~/.local/lib/python*/site-packages'
      - '.pytest_cache'
      - '__pycache__'
      - 'src/__pycache__'
      - 'backend/__pycache__'
    ttl: '30d'
    invalidation:
      - '**/requirements*.txt'
      - '**/pyproject.toml'
      - 'src/**/*.py'
      - 'backend/**/*.py'

  # Dependency Caching
  dependencies:
    strategy: 'ultra-fast'
    optimization:
      - 'binary-wheels-only'
      - 'prefer-offline'
      - 'no-audit'
    paths:
      - '~/.cache/pip'
      - '~/.npm'
      - 'node_modules/.cache'
    ttl: '14d'

# Cache optimization rules
optimization_rules:
  # Cache hit rate targets
  targets:
    test_results: '>80%'
    build_artifacts: '>70%'
    dependencies: '>90%'

  # Performance thresholds
  thresholds:
    cache_restore_time: '<30s'
    cache_save_time: '<60s'
    total_cache_overhead: '<5%'

  # Invalidation strategies
  invalidation:
    smart_fingerprinting: true
    content_hash_validation: true
    dependency_graph_analysis: true
    timestamp_aware: false  # Prefer content-based invalidation

# Advanced caching features
advanced_features:
  # Multi-layer caching
  multi_layer:
    enabled: true
    layers:
      - 'in-memory'
      - 'local-ssd'
      - 'distributed-cache'

  # Compression optimization
  compression:
    algorithm: 'zstd'
    level: 3
    parallel: true

  # Cache warming
  warming:
    enabled: true
    strategies:
      - 'predictive-prefetch'
      - 'parallel-warming'

  # Analytics
  analytics:
    enabled: true
    metrics:
      - 'hit_rate'
      - 'save_time'
      - 'restore_time'
      - 'size_efficiency'
      - 'invalidation_rate'

# Usage examples for different scenarios
usage_scenarios:
  # Full build (no cache)
  cold_build:
    estimated_time: '12-15 minutes'
    cache_usage: '0%'

  # Incremental build (partial cache)
  warm_build:
    estimated_time: '6-8 minutes'
    cache_usage: '40-60%'

  # Hot build (full cache)
  hot_build:
    estimated_time: '3-5 minutes'
    cache_usage: '80-90%'

  # Ultra-optimized (cached results)
  ultra_build:
    estimated_time: '1-3 minutes'
    cache_usage: '>90%'
    note: 'When tests and builds can be skipped'