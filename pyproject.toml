# ============================================================================
# AI Enhanced PDF Scholar - Python Project Configuration
# Modern Python tooling configuration (PEP 518)
# ============================================================================

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# ============================================================================
# Project Metadata
# ============================================================================

[project]
name = "ai-enhanced-pdf-scholar"
version = "2.0.0"
description = "AI-powered PDF document management and analysis system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Enhanced PDF Scholar Team", email = "contact@example.com"}
]
maintainers = [
    {name = "AI Enhanced PDF Scholar Team", email = "contact@example.com"}
]
keywords = [
    "pdf", "ai", "rag", "document-management", "llm", "fastapi", "react"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
]
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.116.0,<0.120.0",
    "uvicorn[standard]>=0.35.0,<0.40.0",
    "hypercorn>=0.17.0,<1.0.0",
    "python-multipart>=0.0.19,<0.1.0",
    "requests>=2.32.4",
    "urllib3>=2.5.0",
    "PyMuPDF>=1.26.0,<1.30.0",
    "pydantic>=2.11.0,<2.15.0",
    "google-generativeai>=0.8.5",
    "openai>=1.95.0",
    "llama-index-core>=0.12.49,<0.13.0",
    "llama-index-llms-google-genai>=0.2.4,<0.3.0",
    "llama-index-embeddings-google-genai>=0.2.1,<0.3.0",
    "llama-index-readers-file>=0.4.11,<0.5.0",
    "cachetools>=6.1.0",
    "tenacity>=9.1.0",
    "typing-extensions>=4.14.0",
    "python-dotenv>=1.0.0",
    "markdown>=3.6.0",
    "psycopg2-binary>=2.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.24.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "ruff>=0.8.0",
    "mypy>=1.11.0",
    "pre-commit>=4.0.0",
    "bandit>=1.8.0",
    "pip-audit>=2.7.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.24.0",
    "playwright>=1.40.0",
    "pytest-benchmark>=4.0.0",
]
performance = [
    "uvloop>=0.21.0",
    "aiofiles>=24.0.0",
    "aiocache>=0.12.3",
    "orjson>=3.10.0",
    "msgpack>=1.1.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
]
security = [
    "bandit>=1.8.0",
    "pip-audit>=2.7.0",
    "semgrep>=1.85.0",
]

[project.urls]
Homepage = "https://github.com/Jackela/ai_enhanced_pdf_scholar"
Documentation = "https://github.com/Jackela/ai_enhanced_pdf_scholar/blob/main/PROJECT_DOCS.md"
Repository = "https://github.com/Jackela/ai_enhanced_pdf_scholar"
"Bug Tracker" = "https://github.com/Jackela/ai_enhanced_pdf_scholar/issues"
Changelog = "https://github.com/Jackela/ai_enhanced_pdf_scholar/releases"

[project.scripts]
ai-pdf-scholar = "web_main:main"

# ============================================================================
# Black Configuration (Code Formatting)
# ============================================================================

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | venv
    | build
    | dist
    | node_modules
    | frontend
)/
'''
force-exclude = '''
/(
    migrations/
    | htmlcov/
    | coverage_*/
)/
'''

# ============================================================================
# isort Configuration (Import Sorting)
# ============================================================================

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "backend", "tests"]
known_third_party = [
    "fastapi", "uvicorn", "pydantic", "pytest", "llama_index",
    "PyMuPDF", "markdown", "dotenv"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = [
    "*/migrations/*",
    "*/.venv/*",
    "*/venv/*",
    "*/node_modules/*",
    "*/frontend/*",
    "htmlcov/*",
    "coverage_*/*"
]

# ============================================================================
# MyPy Configuration (Type Checking)
# ============================================================================

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

# Exclude directories
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "node_modules/",
    "frontend/",
    "migrations/",
    "htmlcov/",
    "coverage_.*/",
]

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "PyMuPDF.*",
    "llama_index.*",
    "playwright.*",
]
ignore_missing_imports = true

# ============================================================================
# Pytest Configuration (Consolidated from pytest.ini)
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*", "*Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--disable-warnings",
    "--maxfail=10",
    "-n", "auto",
    "--dist=loadfile",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=75",
    "--cov-config=pyproject.toml",
]
markers = [
    "unit: Fast unit tests - isolated component testing",
    "integration: Integration tests - component interaction testing",
    "e2e: End-to-end tests - full workflow testing",
    "database: Tests requiring database setup and operations",
    "services: Service layer tests",
    "repositories: Repository layer tests",
    "controllers: Controller layer tests",
    "api: API endpoint tests",
    "frontend: Frontend tests",
    "security: Security-focused tests",
    "performance: Performance benchmark tests",
    "slow: Slow running tests (>1 second)",
    "resource: Resource monitoring and usage tests",
    "benchmark: Benchmark performance tests using pytest-benchmark",
    "asyncio: Async test functions",
    "smoke: Smoke tests for basic functionality",
    "regression: Regression tests",
    "critical: Critical path tests that must always pass",
    "load_test: Load testing for production scenarios",
    "resilience: Resilience and fault tolerance tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::DeprecationWarning:pkg_resources.*",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "pytest_log.txt"
log_file_level = "DEBUG"
timeout = 60
timeout_method = "thread"
cache_dir = ".pytest_cache"

# ============================================================================
# Coverage Configuration (Consolidated from .coveragerc)
# ============================================================================

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
concurrency = ["multiprocessing"]
data_file = ".coverage"
omit = [
    "src/web/static/*",
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "src/ui/*",
    "*conftest.py",
    "*/fixtures/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/frontend/*",
]

[tool.coverage.report]
fail_under = 75
show_missing = true
skip_covered = false
skip_empty = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if self\\.debug",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if __name__ == \"__main__\":",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"
title = "AI Enhanced PDF Scholar - Test Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

# ============================================================================
# Bandit Configuration (Security)
# ============================================================================

[tool.bandit]
exclude_dirs = [
    "tests",
    "venv",
    ".venv",
    "build",
    "dist",
    "node_modules",
    "frontend",
    "htmlcov",
    "coverage_*",
]
skips = [
    "B101",  # Test for use of assert (common in tests)
    "B601",  # Test for shell injection (we control our shell usage)
]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle", 
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput"
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output"
]

# ============================================================================
# Ruff Configuration (Fast Python Linter/Formatter - Replaces Flake8)
# ============================================================================

[tool.ruff]
target-version = "py310"
line-length = 88
fix = true
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    ".env",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    "node_modules",
    "frontend",
    "migrations",
    "alembic",
    ".github",
    "htmlcov",
    "coverage_*",
    ".coverage",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".Python",
    ".tox",
    ".coverage.*"
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "C90",  # mccabe complexity
    "PERF", # perflint
    "S",    # flake8-bandit (security)
    "C",    # flake8-comprehensions
    "N",    # pep8-naming
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "E402",   # module level import not at top of file
    "F401",   # imported but unused
    "B008",   # do not perform function calls in argument defaults
    "B009",   # do not call getattr with a constant attribute value
    "UP007",  # Use X | Y for type annotations (Python 3.10+)
    "S101",   # use of assert detected (common in tests)
    "N802",   # function name should be lowercase
    "N803",   # argument name should be lowercase
    "N806",   # variable in function should be lowercase
]

[tool.ruff.lint.per-file-ignores]
# Test files can be more lenient
"tests/*.py" = ["F401", "F811", "E501", "S101", "S105", "S106", "S107"]
"test_*.py" = ["F401", "F811", "E501", "S101", "S105", "S106", "S107"]
"conftest.py" = ["F401", "F811"]
# Allow complex imports in __init__.py files
"__init__.py" = ["F401", "F403"]
# Config files can have complex setup
"config.py" = ["E501"]
# Web main can be complex
"web_main.py" = ["C901"]
# Database models can have long lines
"*/models.py" = ["E501"]
# Migration files (if any)
"migrations/*.py" = ["E501", "F401"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["src", "backend", "tests"]
known-third-party = ["fastapi", "uvicorn", "pydantic", "pytest", "llama_index", "PyMuPDF", "markdown", "dotenv"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = 88

# ============================================================================
# Development Tools Configuration
# ============================================================================

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# ============================================================================
# Build Configuration
# ============================================================================

[tool.wheel]
universal = false

# ============================================================================
# Development Scripts
# ============================================================================

[tool.scripts]
dev = "python web_main.py --debug"
test = "pytest"
lint = "flake8 src/ backend/ tests/"
format = "black src/ backend/ tests/ && isort src/ backend/ tests/"
typecheck = "mypy src/ backend/"
security = "bandit -r src/ backend/"
coverage = "pytest --cov=src --cov-report=html"