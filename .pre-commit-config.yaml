# ============================================================================
# AI Enhanced PDF Scholar - Pre-commit Hooks Configuration
# Automated code quality checks before every commit
# ============================================================================

# Pre-commit configuration version
repos:
  # ============================================================================
  # Built-in Pre-commit Hooks
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File format and syntax checks
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: [--maxkb=1000]  # 1MB limit

      # Python-specific checks
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]

      # Security and sensitive data
      - id: detect-private-key
      - id: detect-aws-credentials

      # Git and file management
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]

  # ============================================================================
  # Python Code Formatting - Black
  # ============================================================================
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]
        files: \.py$
        exclude: ^(frontend/|node_modules/|\.venv/|venv/|build/|dist/)

  # ============================================================================
  # Python Import Sorting - isort
  # ============================================================================
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        files: \.py$
        exclude: ^(frontend/|node_modules/|\.venv/|venv/|build/|dist/)

  # ============================================================================
  # Python Linting - Flake8
  # ============================================================================
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        additional_dependencies: [
          flake8-bugbear,
          flake8-comprehensions,
          flake8-simplify,
          flake8-docstrings,
          flake8-quotes,
          flake8-import-order,
        ]
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        files: \.py$
        exclude: ^(frontend/|node_modules/|\.venv/|venv/|build/|dist/|migrations/)

  # ============================================================================
  # Python Security - Bandit
  # ============================================================================
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, -f, json, -o, bandit-report.json]
        files: \.py$
        exclude: ^(tests/|test_.*\.py|conftest\.py|frontend/|node_modules/|\.venv/|venv/)

  # ============================================================================
  # Python Type Checking - MyPy (Disabled in CI for speed)
  # ============================================================================
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.8.0
  #   hooks:
  #     - id: mypy
  #       additional_dependencies: [types-all]
  #       args: [--ignore-missing-imports, --no-strict-optional]
  #       files: \.py$
  #       exclude: ^(frontend/|node_modules/|\.venv/|venv/|build/|dist/|tests/)

  # ============================================================================
  # Python Requirements Management
  # ============================================================================
  - repo: https://github.com/jazzband/pip-tools
    rev: 7.3.0
    hooks:
      - id: pip-compile
        files: requirements\.in$
        args: [--upgrade, --resolver=backtracking]

  # ============================================================================
  # Frontend - JavaScript/TypeScript
  # ============================================================================
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        types: [file]
        additional_dependencies:
          - eslint@8.56.0
          - '@typescript-eslint/parser@6.10.0'
          - '@typescript-eslint/eslint-plugin@6.10.0'
          - eslint-plugin-react@7.33.2
          - eslint-plugin-react-hooks@4.6.0
        args: [--fix, --ext, .js,.jsx,.ts,.tsx]
        exclude: ^(src/|backend/|tests/|\.venv/|venv/|build/|dist/|node_modules/)

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|css|scss|md|yaml|yml)$
        exclude: ^(src/|backend/|tests/|\.venv/|venv/|build/|dist/|node_modules/|package-lock\.json)
        additional_dependencies:
          - prettier@3.1.1
          - '@trivago/prettier-plugin-sort-imports@4.3.0'

  # ============================================================================
  # Documentation
  # ============================================================================
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix]
        files: \.md$
        exclude: ^(frontend/node_modules/|\.venv/|venv/|build/|dist/)

  # ============================================================================
  # Secrets Detection
  # ============================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: ^(frontend/package-lock\.json|\.venv/|venv/|build/|dist/)

  # ============================================================================
  # Docker
  # ============================================================================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.1-beta
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # ============================================================================
  # YAML/JSON Validation
  # ============================================================================
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-d, relaxed]
        files: \.(yaml|yml)$
        exclude: ^(frontend/node_modules/|\.venv/|venv/)

  # ============================================================================
  # Conventional Commits
  # ============================================================================
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [optional-scope]

  # ============================================================================
  # Custom Local Hooks
  # ============================================================================
  - repo: local
    hooks:
      # Python dependency vulnerability check
      - id: safety-check
        name: Safety vulnerability check
        entry: safety
        args: [check, --json, --output, safety-report.json]
        language: system
        files: requirements\.txt$
        pass_filenames: false

      # Python test coverage check
      - id: pytest-coverage
        name: PyTest with coverage
        entry: pytest
        args: [--cov=src, --cov-fail-under=10, --cov-report=term-missing]
        language: system
        files: \.py$
        pass_filenames: false
        exclude: ^(frontend/|node_modules/|\.venv/|venv/)

      # Frontend type checking
      - id: frontend-typecheck
        name: Frontend TypeScript check
        entry: bash
        args: [-c, 'cd frontend && npm run type-check']
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        pass_filenames: false

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: Check for TODO/FIXME in production code
        entry: bash
        args: [-c, 'grep -rn "TODO\|FIXME" src/ backend/ && exit 1 || exit 0']
        language: system
        files: \.py$
        exclude: ^(tests/|test_.*\.py)
        pass_filenames: false

      # Check database migrations
      - id: check-migrations
        name: Check database migration consistency
        entry: python
        args: [-c, 'import sys; sys.path.insert(0, "."); from src.database.connection import DatabaseConnection; from src.database.migrations import DatabaseMigrator; db = DatabaseConnection(":memory:"); migrator = DatabaseMigrator(db); migrator.create_tables_if_not_exist(); print("âœ… Database migrations valid")']
        language: system
        files: ^src/database/.*\.py$
        pass_filenames: false

# ============================================================================
# Pre-commit Configuration
# ============================================================================

# Minimum pre-commit version
minimum_pre_commit_version: 3.6.0

# Default language version
default_language_version:
  python: python3.11
  node: "18"

# Default stages
default_stages: [commit, push]

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [safety-check, pytest-coverage, frontend-typecheck, check-todos, check-migrations, bandit, mypy, pip-compile, eslint, prettier, markdownlint, detect-secrets, hadolint-docker, yamllint, conventional-pre-commit]
  submodules: false

# ============================================================================
# Installation Instructions
# ============================================================================

# To install pre-commit hooks, run:
#   pip install pre-commit
#   pre-commit install
#   pre-commit install --hook-type commit-msg
#
# To run all hooks on all files:
#   pre-commit run --all-files
#
# To update hooks to latest versions:
#   pre-commit autoupdate
#
# To skip hooks for a commit:
#   git commit -m "message" --no-verify
#
# To run specific hook:
#   pre-commit run <hook-id>
#
# To bypass specific hook:
#   SKIP=<hook-id> git commit -m "message"