# =============================================================================
# AI Enhanced PDF Scholar - .gitignore
# Comprehensive gitignore following GitHub open source best practices
# =============================================================================

# ==================== Python ====================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
# Python lib directory (exclude frontend lib)
/lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
.coverage.*

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# ==================== Node.js / Frontend ====================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# ==================== IDE / Editors ====================
# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# JetBrains IDEs (IntelliJ, PyCharm, etc.)
.idea/
*.iws
*.iml
*.ipr

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*~
*.swp
*.swo
.netrwhist

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Eclipse
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders
.project
.pydevproject

# ==================== Operating Systems ====================
# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.lnk

# Linux
*~

# ==================== Databases ====================
# SQLite
*.db
*.sqlite
*.sqlite3
*.db-journal
*.db-shm
*.db-wal

# Other databases
*.mdb
*.accdb

# ==================== AI/ML Specific ====================
# Model files (large binary files)
*.pkl
*.pickle
*.h5
*.hdf5
*.pt
*.pth
*.onnx
*.tflite
*.pb
*.joblib

# Vector databases and indexes
vectors/
vector_storage/
chroma_db/
faiss_index/
*.index
*.faiss

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Experiment tracking
mlruns/
wandb/
.neptune/

# ==================== Project Specific ====================
# Database files
library.db
test.db
test_library.db
test_settings.db
*.db.backup

# Vector storage and RAG cache
vector_indexes/
.rag_cache/
rag_cache/
vector_store/

# Test artifacts
test_temp/
test_data/
temp_test_*/
perf_test_*/

# Performance analysis files (temporary/generated)
performance_benchmark.py
quick_performance_analysis.py
rag_performance_analysis.py
performance_*.json
benchmark_results/
profiling_output/
PERFORMANCE_ANALYSIS_REPORT.md

# Test output files
test_output.txt
pytest_log.txt
test_results.txt

# Claude Code configuration
.claude/

# PDF files (sample documents, test files)
*.pdf
sample_documents/
test_pdfs/

# Log files
*.log
logs/
app.log
error.log
debug.log

# Temporary files and directories
temp/
tmp/
*.temp
*.tmp
*_temp/
*_tmp/

# Backup files
*.bak
*.backup
*.old

# Cache directories
.cache/
cache/
*.cache

# Generated documentation
docs/build/
documentation/generated/

# API keys and secrets (extra protection)
secrets/
.secrets
api_keys.txt
*.key
*.pem
credentials.json

# Large test files
test_large_files/
sample_pdfs/
test_documents/

# Build artifacts
build/
dist/
*.tar.gz
*.zip

# ==================== Monitoring & Analytics ====================
# Application monitoring
.monitoring/
metrics/
traces/

# Error tracking
error_reports/
crash_logs/

# ==================== CI/CD ====================
# GitHub Actions (keep workflows, ignore temporary files)
.github/workflows/*.log

# Docker
.dockerignore

# ==================== End of .gitignore ====================