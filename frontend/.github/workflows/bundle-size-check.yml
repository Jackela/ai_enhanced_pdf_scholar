name: Bundle Size Check

on:
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/bundle-size-check.yml'
  push:
    branches: [main]
    paths:
      - 'frontend/**'

jobs:
  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Build production bundle
        run: npm run build:ci
        env:
          NODE_ENV: production
          CI: true

      - name: Run bundle size check
        run: npm run check-size

      - name: Run bundle analysis
        run: npm run analyze

      - name: Upload bundle analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: |
            frontend/dist/bundle-analysis.json
            frontend/dist/assets/
            frontend/dist/chunks/
          retention-days: 7

      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read bundle analysis
            const analysisPath = path.join(process.cwd(), 'frontend/dist/bundle-analysis.json');
            
            if (fs.existsSync(analysisPath)) {
              const analysis = JSON.parse(fs.readFileSync(analysisPath, 'utf8'));
              
              const formatSize = (bytes) => {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
              };
              
              const mainJS = analysis.mainBundle.js;
              const mainCSS = analysis.mainBundle.css;
              const initialLoad = mainJS + mainCSS;
              
              const comment = `## üì¶ Bundle Size Analysis
              
**Main Bundle:**
- JavaScript: ${formatSize(mainJS)} (${((mainJS / (300 * 1024)) * 100).toFixed(1)}% of 300KB limit)
- CSS: ${formatSize(mainCSS)} (${((mainCSS / (50 * 1024)) * 100).toFixed(1)}% of 50KB limit)
- **Initial Load: ${formatSize(initialLoad)} (${((initialLoad / (400 * 1024)) * 100).toFixed(1)}% of 400KB limit)**

**Route Chunks:** ${analysis.chunks.filter(c => c.name.includes('View-') || c.name.includes('Upload-')).length} properly split

**Vendor Chunks:** ${analysis.chunks.filter(c => c.name.includes('vendor') || c.name.includes('react-')).length} optimally cached

**Performance Status:** ${analysis.metrics.lazyEfficiency}% lazy load efficiency

${analysis.recommendations.length > 0 ? `\n**Recommendations:**\n${analysis.recommendations.map(r => `- ${r.priority} ${r.message}`).join('\n')}` : '‚úÖ **No optimization recommendations - excellent performance!**'}

---
*Bundle analysis generated automatically by CI*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Check bundle size regression
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Checking for bundle size regression..."
          
          # This would typically compare with main branch
          # For now, we ensure the build passes size limits
          if npm run check-size; then
            echo "‚úÖ Bundle size check passed"
          else
            echo "‚ùå Bundle size check failed"
            exit 1
          fi