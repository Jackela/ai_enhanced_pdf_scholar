name: 🔒 Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ============================================================================
  # Dependency Vulnerability Scanning
  # ============================================================================
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Python security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit semgrep
          pip install -r requirements.txt
      
      - name: 🔍 Python dependency vulnerability scan (Safety)
        run: |
          echo "## 🐍 Python Dependencies - Safety Scan" >> $GITHUB_STEP_SUMMARY
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "Found $VULN_COUNT vulnerabilities" >> $GITHUB_STEP_SUMMARY
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ Vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities[] | "- **" + .vulnerability_id + "**: " + .package_name + " (" + .installed_version + ") - " + .advisory' safety-report.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            else
              echo "✅ No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 🔍 Python dependency audit (pip-audit)
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Python Dependencies - pip-audit" >> $GITHUB_STEP_SUMMARY
          pip-audit --format=json --output=pip-audit-report.json || true
          if [ -f pip-audit-report.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
            echo "Found $VULN_COUNT vulnerabilities via pip-audit" >> $GITHUB_STEP_SUMMARY
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ Additional vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No additional vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: 🔍 Frontend dependency audit (npm audit)
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎨 Frontend Dependencies - npm audit" >> $GITHUB_STEP_SUMMARY
          cd frontend
          npm audit --audit-level=high --json > ../npm-audit-report.json || true
          cd ..
          if [ -f npm-audit-report.json ]; then
            VULN_COUNT=$(jq '.metadata.vulnerabilities.total' npm-audit-report.json 2>/dev/null || echo "0")
            echo "Found $VULN_COUNT frontend vulnerabilities" >> $GITHUB_STEP_SUMMARY
            if [ "$VULN_COUNT" -gt 0 ]; then
              HIGH_COUNT=$(jq '.metadata.vulnerabilities.high' npm-audit-report.json 2>/dev/null || echo "0")
              CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical' npm-audit-report.json 2>/dev/null || echo "0")
              MODERATE_COUNT=$(jq '.metadata.vulnerabilities.moderate' npm-audit-report.json 2>/dev/null || echo "0")
              
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
                echo "❌ Critical/High vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
                echo "- Critical: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
                echo "- High: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
                echo "- Moderate: $MODERATE_COUNT" >> $GITHUB_STEP_SUMMARY
                echo "🔧 Run 'npm audit fix' to attempt automatic fixes" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ Only moderate vulnerabilities found" >> $GITHUB_STEP_SUMMARY
                echo "- Moderate: $MODERATE_COUNT" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "✅ No frontend vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 📤 Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports-${{ github.sha }}
          path: |
            safety-report.json
            pip-audit-report.json
            npm-audit-report.json
          retention-days: 30

  # ============================================================================
  # Static Application Security Testing (SAST)
  # ============================================================================
  sast-scan:
    name: 🛡️ Static Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
          pip install -r requirements.txt
      
      - name: 🔍 Bandit security scan
        run: |
          echo "## 🛡️ Bandit Security Scan" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ backend/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            ISSUE_COUNT=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            echo "Found $ISSUE_COUNT potential security issues" >> $GITHUB_STEP_SUMMARY
            if [ "$ISSUE_COUNT" -gt 0 ]; then
              echo "⚠️ Security issues found!" >> $GITHUB_STEP_SUMMARY
              HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json 2>/dev/null || echo "0")
              MEDIUM_COUNT=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json 2>/dev/null || echo "0")
              echo "- High severity: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- Medium severity: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security issues found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 🔍 Semgrep security scan
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Semgrep Security Analysis" >> $GITHUB_STEP_SUMMARY
          semgrep --config=auto --json --output=semgrep-report.json src/ backend/ || true
          if [ -f semgrep-report.json ]; then
            FINDING_COUNT=$(jq '.results | length' semgrep-report.json 2>/dev/null || echo "0")
            echo "Found $FINDING_COUNT findings" >> $GITHUB_STEP_SUMMARY
            if [ "$FINDING_COUNT" -gt 0 ]; then
              echo "⚠️ Security findings detected!" >> $GITHUB_STEP_SUMMARY
              ERROR_COUNT=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' semgrep-report.json 2>/dev/null || echo "0")
              WARNING_COUNT=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' semgrep-report.json 2>/dev/null || echo "0")
              echo "- Errors: $ERROR_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- Warnings: $WARNING_COUNT" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security findings!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 📤 Upload SAST reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports-${{ github.sha }}
          path: |
            bandit-report.json
            semgrep-report.json
          retention-days: 30

  # ============================================================================
  # License Compliance Check
  # ============================================================================
  license-check:
    name: 📜 License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses
          pip install -r requirements.txt
      
      - name: 📜 Check Python package licenses
        run: |
          echo "## 📜 Python Package Licenses" >> $GITHUB_STEP_SUMMARY
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses --format=markdown >> $GITHUB_STEP_SUMMARY
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: 📦 Install license checker for Node.js
        run: npm install -g license-checker
      
      - name: 📜 Check frontend package licenses
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📜 Frontend Package Licenses" >> $GITHUB_STEP_SUMMARY
          cd frontend
          license-checker --json --out ../frontend-licenses.json
          license-checker --summary >> $GITHUB_STEP_SUMMARY
      
      - name: 📤 Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports-${{ github.sha }}
          path: |
            python-licenses.json
            frontend-licenses.json
          retention-days: 30

  # ============================================================================
  # Secrets Detection
  # ============================================================================
  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan
      
      - name: 🔍 Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --no-git
        continue-on-error: true
      
      - name: 🔍 Additional secrets scan with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true
      
      - name: ✅ Secrets scan summary
        run: |
          echo "## 🔐 Secrets Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Completed secrets scanning with TruffleHog and GitLeaks" >> $GITHUB_STEP_SUMMARY
          echo "No secrets should be found in a properly configured repository" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Additional Security Check" >> $GITHUB_STEP_SUMMARY
          python scripts/test_security.py >> $GITHUB_STEP_SUMMARY 2>&1 || true

  # ============================================================================
  # Security Summary Report
  # ============================================================================
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, license-check, secrets-scan]
    if: always()
    
    steps:
      - name: 📊 Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Scan Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Vulnerabilities | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Security Analysis | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Keep dependencies updated regularly" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Review and address any security findings" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Never commit API keys or sensitive data" >> $GITHUB_STEP_SUMMARY
          echo "- 📜 Ensure license compliance for all dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Run security scans before each release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY