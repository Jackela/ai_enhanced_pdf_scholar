name: üìö Documentation Validation Pipeline

on:
  push:
    paths:
      - '**.md'
      - 'docs/**'
      - 'PROJECT_DOCS.md'
      - 'API_ENDPOINTS.md'
      - 'README.md'
      - 'CLAUDE.md'
  pull_request:
    paths:
      - '**.md'
      - 'docs/**'
      - 'PROJECT_DOCS.md'
      - 'API_ENDPOINTS.md'
      - 'README.md'
      - 'CLAUDE.md'
  workflow_dispatch:
    inputs:
      validation_level:
        description: 'Documentation validation level'
        required: false
        default: 'standard'
        type: choice
        options: ['basic', 'standard', 'comprehensive']

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '22'
  TIMEOUT_STANDARD: 15
  TIMEOUT_QUICK: 5
  VALIDATION_LEVEL: ${{ github.event.inputs.validation_level || 'standard' }}

concurrency:
  group: docs-validation-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect documentation changes
  docs-changes:
    name: üîç Documentation Change Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      markdown-changed: ${{ steps.changes.outputs.markdown }}
      has-changes: ${{ steps.summary.outputs.has-changes }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üîç Detect Documentation Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            markdown:
              - '**.md'
              - 'docs/**'

      - name: üìã Change Summary
        id: summary
        run: |
          HAS_CHANGES="false"
          if [ "${{ steps.changes.outputs.markdown }}" = "true" ]; then
            HAS_CHANGES="true"
          fi
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          echo "## üîç Documentation Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "- **Markdown Files:** ${{ steps.changes.outputs.markdown == 'true' && '‚úÖ Changed' || '‚è≠Ô∏è No changes' }}" >> $GITHUB_STEP_SUMMARY

  # Markdown validation
  markdown-validation:
    name: üìù Markdown Validation
    needs: docs-changes
    if: needs.docs-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      syntax-errors: ${{ steps.validation.outputs.syntax-errors }}
      structure-issues: ${{ steps.validation.outputs.structure-issues }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üîß Install Markdown Tools
        run: |
          npm install -g markdownlint-cli

      - name: üîç Markdown Linting
        id: validation
        run: |
          echo "Running markdown validation..."
          
          # Create markdownlint config
          cat > .markdownlint.json << 'EOF'
          {
            "MD013": { "line_length": 120 },
            "MD033": false,
            "MD041": false,
            "MD026": false
          }
          EOF
          
          # Run markdownlint
          SYNTAX_ERRORS=0
          markdownlint *.md > markdownlint-results.txt 2>&1 || SYNTAX_ERRORS=$?
          
          echo "syntax-errors=$SYNTAX_ERRORS" >> $GITHUB_OUTPUT
          
          echo "## üìù Markdown Validation Results" >> $GITHUB_STEP_SUMMARY
          if [ $SYNTAX_ERRORS -eq 0 ]; then
            echo "‚úÖ **Markdown syntax validation passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Markdown syntax issues found:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -10 markdownlint-results.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: üèóÔ∏è Document Structure Check
        run: |
          # Check required documentation files exist
          MISSING_FILES=""
          REQUIRED_FILES="README.md PROJECT_DOCS.md API_ENDPOINTS.md"
          
          for file in $REQUIRED_FILES; do
            if [ ! -f "$file" ]; then
              MISSING_FILES="$MISSING_FILES $file"
            fi
          done
          
          if [ -n "$MISSING_FILES" ]; then
            echo "‚ùå **Missing required documentation files:**$MISSING_FILES" >> $GITHUB_STEP_SUMMARY
            echo "structure-issues=1" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ **All required documentation files present**" >> $GITHUB_STEP_SUMMARY
            echo "structure-issues=0" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ Upload Validation Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: markdown-validation-${{ github.sha }}
          path: |
            markdownlint-results.txt
          retention-days: 7

  # Documentation quality gate
  docs-quality-gate:
    name: üö™ Documentation Quality Gate
    needs: [docs-changes, markdown-validation]
    if: always() && needs.docs-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: üìä Quality Gate Assessment
        run: |
          echo "## üö™ Documentation Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Result | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          QUALITY_PASSED="true"
          
          # Markdown syntax check
          SYNTAX_ERRORS="${{ needs.markdown-validation.outputs.syntax-errors }}"
          if [ "$SYNTAX_ERRORS" = "0" ] || [ "$SYNTAX_ERRORS" = "" ]; then
            echo "| Markdown Syntax | ‚úÖ PASS | No syntax errors | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Markdown Syntax | ‚ùå FAIL | $SYNTAX_ERRORS errors found | Fix syntax issues |" >> $GITHUB_STEP_SUMMARY
            QUALITY_PASSED="false"
          fi
          
          # Structure check
          STRUCTURE_ISSUES="${{ needs.markdown-validation.outputs.structure-issues }}"
          if [ "$STRUCTURE_ISSUES" = "0" ] || [ "$STRUCTURE_ISSUES" = "" ]; then
            echo "| Document Structure | ‚úÖ PASS | All required files present | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Document Structure | ‚ùå FAIL | Missing required files | Add missing documentation |" >> $GITHUB_STEP_SUMMARY
            QUALITY_PASSED="false"
          fi
          
          # Overall result
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$QUALITY_PASSED" = "true" ]; then
            echo "### ‚úÖ Documentation Quality Gate: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All documentation quality checks have passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Documentation Quality Gate: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Please address the failing checks before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Set environment variable for potential failure
          echo "DOCS_QUALITY_PASSED=$QUALITY_PASSED" >> $GITHUB_ENV

      - name: ‚ö†Ô∏è Documentation Quality Warning
        if: env.DOCS_QUALITY_PASSED == 'false'
        run: |
          echo "Documentation quality issues detected."
          echo "Please address these issues before merging to main branch."