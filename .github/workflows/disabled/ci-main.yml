name: 🚀 Main CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution (build only)'
        required: false
        default: false
        type: boolean
      run_integration:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '22'
  TIMEOUT_STANDARD: 15
  TIMEOUT_QUICK: 5
  TIMEOUT_EXTENDED: 30
  CACHE_VERSION: 'v1'

concurrency:
  group: ci-main-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast change detection to optimize pipeline execution
  change-detection:
    name: 🔍 Change Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      tests-changed: ${{ steps.changes.outputs.tests }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package*.json'
              - 'vite.config.ts'
              - 'tsconfig*.json'
            backend:
              - 'src/**'
              - 'backend/**'
              - 'pyproject.toml'
              - 'requirements*.txt'
            tests:
              - 'tests/**'
              - 'pytest.ini'
              - '.coveragerc'
            config:
              - '.github/workflows/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'

  # Core Python testing and validation
  python-tests:
    name: 🐍 Python Tests
    needs: change-detection
    if: needs.change-detection.outputs.backend-changed == 'true' || needs.change-detection.outputs.tests-changed == 'true' || github.event.inputs.run_integration == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.11']
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            pip-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov pytest-asyncio

      - name: 🧪 Run Unit Tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        continue-on-error: false

      - name: 📊 Upload Coverage
        if: github.event.inputs.skip_tests != 'true'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Frontend building and testing
  frontend-build:
    name: 🎨 Frontend Build
    needs: change-detection
    if: needs.change-detection.outputs.frontend-changed == 'true' || needs.change-detection.outputs.config-changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🔧 Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: 🧪 Run Frontend Tests
        if: github.event.inputs.skip_tests != 'true'
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

      - name: 📦 Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist
          retention-days: 7

  # Code quality and linting
  code-quality:
    name: ✨ Code Quality
    needs: change-detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔧 Install Python Linting Tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: 🔍 Python Code Style (Black)
        if: needs.change-detection.outputs.backend-changed == 'true'
        run: black --check --diff src/

      - name: 🔍 Python Import Sorting (isort)
        if: needs.change-detection.outputs.backend-changed == 'true'
        run: isort --check-only --diff src/

      - name: 🔍 Python Linting (Flake8)
        if: needs.change-detection.outputs.backend-changed == 'true'
        run: flake8 src/

      - name: 🔍 Python Type Checking (MyPy)
        if: needs.change-detection.outputs.backend-changed == 'true'
        run: mypy src/ --ignore-missing-imports

      - name: 🔧 Install Frontend Linting Tools
        if: needs.change-detection.outputs.frontend-changed == 'true'
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Frontend Linting (ESLint)
        if: needs.change-detection.outputs.frontend-changed == 'true'
        working-directory: ./frontend
        run: npm run lint

      - name: 🔍 Frontend Type Checking
        if: needs.change-detection.outputs.frontend-changed == 'true'
        working-directory: ./frontend
        run: npm run type-check

  # Integration testing
  integration-tests:
    name: 🔗 Integration Tests
    needs: [change-detection, python-tests, frontend-build]
    if: |
      always() && 
      (needs.python-tests.result == 'success' || needs.python-tests.result == 'skipped') &&
      (needs.frontend-build.result == 'success' || needs.frontend-build.result == 'skipped') &&
      github.event.inputs.run_integration == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 📥 Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist

      - name: 🧪 Run Integration Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          TEST_MODE: integration
        run: |
          pytest tests/integration/ -v --tb=short
        continue-on-error: false

  # Pipeline status summary
  status-summary:
    name: 📊 Pipeline Status
    needs: [change-detection, python-tests, frontend-build, code-quality, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📊 Generate Status Summary
        run: |
          echo "## 🚀 Main CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Change Detection | ${{ needs.change-detection.result }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Tests | ${{ needs.python-tests.result }} | ${{ needs.python-tests.result == 'success' && '✅' || needs.python-tests.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.frontend-build.result }} | ${{ needs.frontend-build.result == 'success' && '✅' || needs.frontend-build.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} | ${{ needs.integration-tests.result == 'success' && '✅' || needs.integration-tests.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Fail Pipeline on Critical Errors
        if: needs.python-tests.result == 'failure' || needs.code-quality.result == 'failure'
        run: |
          echo "Pipeline failed due to critical errors in core components"
          exit 1