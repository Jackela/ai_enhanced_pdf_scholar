name: 🧪 Force Execution Test

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Enable test mode to force all jobs'
        required: false
        default: true
        type: boolean
      verify_execution:
        description: 'Enable execution verification'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'

jobs:
  # 测试变更检测逻辑
  test-change-detection:
    name: 🔍 Test Change Detection
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      frontend-changed: ${{ github.event.inputs.test_mode == 'true' || steps.changes.outputs.frontend == 'true' }}
      backend-changed: ${{ github.event.inputs.test_mode == 'true' || steps.changes.outputs.backend == 'true' }}
      test-mode: ${{ github.event.inputs.test_mode }}
      verify-execution: ${{ github.event.inputs.verify_execution }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Detect Real Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package*.json'
            backend:
              - 'src/**'
              - 'requirements*.txt'

      - name: 🧪 Test Mode Status
        if: github.event.inputs.test_mode == 'true'
        run: |
          echo "🧪 TEST MODE ACTIVATED"
          echo "All jobs will be forced to execute regardless of actual changes"
          echo ""
          echo "Real change detection results:"
          echo "- Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "- Backend changed: ${{ steps.changes.outputs.backend }}"
          echo ""
          echo "Force execution outputs:"
          echo "- Frontend will execute: ${{ github.event.inputs.test_mode == 'true' || steps.changes.outputs.frontend == 'true' }}"
          echo "- Backend will execute: ${{ github.event.inputs.test_mode == 'true' || steps.changes.outputs.backend == 'true' }}"

      - name: 📊 Normal Mode Status
        if: github.event.inputs.test_mode != 'true'
        run: |
          echo "📊 NORMAL MODE - Only changed components will execute"
          echo "- Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "- Backend changed: ${{ steps.changes.outputs.backend }}"

  # 测试Python质量检查强制执行
  test-python-quality:
    name: 🐍 Test Python Quality (Force)
    runs-on: ubuntu-latest
    needs: test-change-detection
    timeout-minutes: 4
    if: needs.test-change-detection.outputs.backend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧪 Verify Job Execution
        run: |
          echo "🐍 PYTHON QUALITY JOB EXECUTING"
          echo "Test Mode: ${{ needs.test-change-detection.outputs.test-mode }}"
          echo "Backend Changed: ${{ needs.test-change-detection.outputs.backend-changed }}"
          echo "Verify Execution: ${{ needs.test-change-detection.outputs.verify-execution }}"
          echo ""
          
          # 创建执行证明文件
          mkdir -p /tmp/execution-proof
          echo "Python Quality Job executed at $(date)" > /tmp/execution-proof/python-quality.txt
          echo "Job ID: ${{ github.job }}" >> /tmp/execution-proof/python-quality.txt
          echo "Run ID: ${{ github.run_id }}" >> /tmp/execution-proof/python-quality.txt
          
          # 验证Python环境
          if command -v python3 &> /dev/null; then
            echo "✅ Python3 available: $(python3 --version)"
          else
            echo "❌ Python3 not available"
          fi
          
          # 检查源代码
          if [ -d "src" ]; then
            python_files=$(find src -name "*.py" | wc -l)
            echo "✅ Found $python_files Python files in src/"
            
            # 模拟实际的质量检查
            echo "🔍 Simulating Ruff quality check..."
            echo "🎨 Simulating code formatting check..."
            echo "🔒 Simulating security scan..."
            
            echo "✅ Python quality checks completed successfully"
          else
            echo "❌ No src directory found"
            exit 1
          fi

      - name: 📤 Upload Execution Proof
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-quality-execution-proof
          path: /tmp/execution-proof/python-quality.txt
          retention-days: 1

  # 测试Frontend质量检查强制执行
  test-frontend-quality:
    name: 🚀 Test Frontend Quality (Force)
    runs-on: ubuntu-latest
    needs: test-change-detection
    timeout-minutes: 4
    if: needs.test-change-detection.outputs.frontend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧪 Verify Job Execution
        run: |
          echo "🚀 FRONTEND QUALITY JOB EXECUTING"
          echo "Test Mode: ${{ needs.test-change-detection.outputs.test-mode }}"
          echo "Frontend Changed: ${{ needs.test-change-detection.outputs.frontend-changed }}"
          echo "Verify Execution: ${{ needs.test-change-detection.outputs.verify-execution }}"
          echo ""
          
          # 创建执行证明文件
          mkdir -p /tmp/execution-proof
          echo "Frontend Quality Job executed at $(date)" > /tmp/execution-proof/frontend-quality.txt
          echo "Job ID: ${{ github.job }}" >> /tmp/execution-proof/frontend-quality.txt
          echo "Run ID: ${{ github.run_id }}" >> /tmp/execution-proof/frontend-quality.txt
          
          # 验证Node环境
          if command -v node &> /dev/null; then
            echo "✅ Node.js available: $(node --version)"
          else
            echo "❌ Node.js not available"
          fi
          
          # 检查前端代码
          if [ -d "frontend" ]; then
            echo "✅ Frontend directory exists"
            
            if [ -f "frontend/package.json" ]; then
              echo "✅ package.json found"
              # 模拟实际的质量检查
              echo "🔍 Simulating TypeScript type check..."
              echo "🎨 Simulating ESLint check..."
              echo "📦 Simulating build validation..."
              
              echo "✅ Frontend quality checks completed successfully"
            else
              echo "⚠️ No package.json found"
            fi
          else
            echo "❌ No frontend directory found"
            exit 1
          fi

      - name: 📤 Upload Execution Proof
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-quality-execution-proof
          path: /tmp/execution-proof/frontend-quality.txt
          retention-days: 1

  # 测试构建阶段强制执行
  test-build-stage:
    name: 🔧 Test Build Stage (Force)
    runs-on: ubuntu-latest
    needs: [test-change-detection, test-python-quality, test-frontend-quality]
    timeout-minutes: 5
    if: always() && (needs.test-python-quality.result == 'success' || needs.test-frontend-quality.result == 'success')
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧪 Verify Build Execution
        run: |
          echo "🔧 BUILD STAGE JOB EXECUTING"
          echo "Test Mode: ${{ needs.test-change-detection.outputs.test-mode }}"
          echo "Python Quality Result: ${{ needs.test-python-quality.result }}"
          echo "Frontend Quality Result: ${{ needs.test-frontend-quality.result }}"
          echo ""
          
          # 创建执行证明文件
          mkdir -p /tmp/execution-proof
          echo "Build Stage Job executed at $(date)" > /tmp/execution-proof/build-stage.txt
          echo "Job ID: ${{ github.job }}" >> /tmp/execution-proof/build-stage.txt
          echo "Run ID: ${{ github.run_id }}" >> /tmp/execution-proof/build-stage.txt
          echo "Upstream Results: Python=${{ needs.test-python-quality.result }}, Frontend=${{ needs.test-frontend-quality.result }}" >> /tmp/execution-proof/build-stage.txt
          
          # 模拟构建过程
          echo "🏗️ Simulating backend build..."
          echo "🚀 Simulating frontend build..."
          echo "📦 Simulating package creation..."
          
          echo "✅ Build stage completed successfully"

      - name: 📤 Upload Execution Proof
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-stage-execution-proof
          path: /tmp/execution-proof/build-stage.txt
          retention-days: 1

  # 最终验证报告
  execution-verification:
    name: 📊 Execution Verification Report
    runs-on: ubuntu-latest
    needs: [test-change-detection, test-python-quality, test-frontend-quality, test-build-stage]
    if: always()
    timeout-minutes: 3
    steps:
      - name: 📊 Generate Verification Report
        run: |
          echo "# 🧪 Force Execution Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Mode**: ${{ needs.test-change-detection.outputs.test-mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verify Execution**: ${{ needs.test-change-detection.outputs.verify-execution }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Changed**: ${{ needs.test-change-detection.outputs.frontend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Changed**: ${{ needs.test-change-detection.outputs.backend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Expected | Actual |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|---------|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Change Detection | ${{ needs.test-change-detection.result }} | Always Run | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐍 Python Quality | ${{ needs.test-python-quality.result }} | Force Run | ${{ needs.test-python-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Frontend Quality | ${{ needs.test-frontend-quality.result }} | Force Run | ${{ needs.test-frontend-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Build Stage | ${{ needs.test-build-stage.result }} | After Quality | ${{ needs.test-build-stage.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 计算执行率
          total_jobs=4
          executed_jobs=0
          
          if [ "${{ needs.test-change-detection.result }}" = "success" ]; then
            ((executed_jobs++))
          fi
          
          if [ "${{ needs.test-python-quality.result }}" = "success" ]; then
            ((executed_jobs++))
          fi
          
          if [ "${{ needs.test-frontend-quality.result }}" = "success" ]; then
            ((executed_jobs++))
          fi
          
          if [ "${{ needs.test-build-stage.result }}" = "success" ]; then
            ((executed_jobs++))
          fi
          
          execution_rate=$((executed_jobs * 100 / total_jobs))
          
          echo "## Execution Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Jobs**: $total_jobs" >> $GITHUB_STEP_SUMMARY
          echo "- **Executed Jobs**: $executed_jobs" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Rate**: ${execution_rate}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $execution_rate -eq 100 ]; then
            echo "🎉 **Result: ALL JOBS EXECUTED SUCCESSFULLY**" >> $GITHUB_STEP_SUMMARY
            echo "The force execution mechanism is working correctly!"
          elif [ $execution_rate -ge 75 ]; then
            echo "✅ **Result: MOSTLY SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "Most jobs executed, minor issues detected."
          else
            echo "❌ **Result: EXECUTION ISSUES DETECTED**" >> $GITHUB_STEP_SUMMARY
            echo "Significant problems with job execution."
          fi
          
          echo ""
          echo "📋 Execution verification completed!"
          echo "📊 Execution Rate: ${execution_rate}%"
          echo "🧪 Test Mode: ${{ needs.test-change-detection.outputs.test-mode }}"