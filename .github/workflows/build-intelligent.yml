name: 🔧 Intelligent Build

on:
  workflow_call:
    inputs:
      frontend-changed:
        required: true
        type: string
      backend-changed:
        required: true
        type: string
      force-full:
        required: false
        type: string
        default: 'false'
    outputs:
      frontend-build-success:
        description: "Frontend build success status"
        value: ${{ jobs.frontend-build.outputs.build-success }}
      backend-build-success:
        description: "Backend build success status"
        value: ${{ jobs.backend-build.outputs.build-success }}
      docker-image-tag:
        description: "Docker image tag"
        value: ${{ jobs.backend-build.outputs.docker-tag }}

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 🚀 前端智能构建
  frontend-build:
    name: 🚀 Frontend Intelligent Build
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: inputs.frontend-changed == 'true' || inputs.force-full == 'true'
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js with Advanced Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🔧 Cache Node Modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: 🔧 Cache Vite Build
        uses: actions/cache@v4
        with:
          path: |
            frontend/dist
            frontend/.vite
          key: vite-build-${{ runner.os }}-${{ hashFiles('frontend/src/**/*', 'frontend/vite.config.ts') }}
          restore-keys: |
            vite-build-${{ runner.os }}-

      - name: 📦 Install Dependencies (Optimized)
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund --silent
        timeout-minutes: 1

      - name: 🔍 Pre-build Validation
        run: |
          cd frontend
          echo "🔍 Validating build environment..."
          echo "Node.js: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "TypeScript: $(npx tsc --version)"
          echo "Vite: $(npx vite --version)"
          
          # 验证关键文件存在
          if [ ! -f "vite.config.ts" ]; then
            echo "❌ vite.config.ts not found!"
            exit 1
          fi
          
          if [ ! -f "tsconfig.json" ]; then
            echo "❌ tsconfig.json not found!"
            exit 1
          fi
          
          echo "✅ Pre-build validation passed"

      - name: 🏗️ Build Application
        run: |
          cd frontend
          echo "🏗️ Starting optimized build..."
          
          # 设置构建环境
          export NODE_ENV=production
          export VITE_BUILD_ANALYZE=false
          export VITE_BUILD_TARGET=es2020
          
          # 执行构建
          npm run build
          
          # 验证构建产物
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found!"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Build failed: index.html not found!"
            exit 1
          fi
          
          echo "✅ Build completed successfully"
        timeout-minutes: 2

      - name: 📊 Build Analysis
        run: |
          cd frontend
          echo "📊 Analyzing build output..."
          
          # 计算构建产物大小
          total_size=$(du -sh dist | cut -f1)
          js_size=$(find dist -name "*.js" -exec du -ch {} + | tail -1 | cut -f1)
          css_size=$(find dist -name "*.css" -exec du -ch {} + | tail -1 | cut -f1)
          
          echo "📦 Build Summary:"
          echo "- Total Size: $total_size"
          echo "- JavaScript: $js_size"
          echo "- CSS: $css_size"
          echo "- Files: $(find dist -type f | wc -l)"
          
          # 添加到作业摘要
          echo "## 🚀 Frontend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Size | $total_size |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript | $js_size |" >> $GITHUB_STEP_SUMMARY
          echo "| CSS | $css_size |" >> $GITHUB_STEP_SUMMARY
          echo "| Files | $(find dist -type f | wc -l) |" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/
          retention-days: 7
          compression-level: 9

      - name: 🔍 Set Build Status
        id: build-status
        run: |
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Frontend build completed successfully"

  # 🐍 后端智能构建
  backend-build:
    name: 🐍 Backend Intelligent Build
    runs-on: ubuntu-latest
    timeout-minutes: 4
    if: inputs.backend-changed == 'true' || inputs.force-full == 'true'
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
      docker-tag: ${{ steps.docker-meta.outputs.tags }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with Cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: 🔧 Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: python-deps-${{ runner.os }}-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            python-deps-${{ runner.os }}-

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
          # 创建虚拟环境用于构建
          python -m venv .venv
          source .venv/bin/activate
          pip install -e .
        timeout-minutes: 2

      - name: 🔍 Pre-build Validation
        run: |
          echo "🔍 Validating Python environment..."
          python --version
          pip --version
          
          # 验证关键文件
          if [ ! -f "pyproject.toml" ]; then
            echo "❌ pyproject.toml not found!"
            exit 1
          fi
          
          # 验证导入
          python -c "import src; print('✅ Package imports successfully')"
          
          echo "✅ Pre-build validation passed"

      - name: 🏗️ Build Python Package
        run: |
          echo "🏗️ Building Python package..."
          python -m build --wheel --sdist
          
          # 验证构建产物
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found!"
            exit 1
          fi
          
          echo "✅ Python package built successfully"
          ls -la dist/
        timeout-minutes: 1

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: 🏷️ Extract Docker Metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ai-enhanced-pdf-scholar
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-buildx-${{ runner.os }}-

      - name: 🐳 Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
        timeout-minutes: 3

      - name: 🔧 Move Docker Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: 🔍 Docker Image Analysis
        run: |
          echo "🔍 Analyzing Docker image..."
          
          # 获取镜像信息
          image_tag=$(echo "${{ steps.docker-meta.outputs.tags }}" | head -1)
          image_size=$(docker image inspect $image_tag --format '{{.Size}}' | numfmt --to=iec-i --suffix=B)
          
          echo "🐳 Docker Image Summary:"
          echo "- Tag: $image_tag"
          echo "- Size: $image_size"
          echo "- Layers: $(docker image inspect $image_tag --format '{{len .RootFS.Layers}}')"
          
          # 测试容器启动
          echo "🧪 Testing container startup..."
          docker run --rm --entrypoint="" $image_tag python --version
          
          # 添加到作业摘要
          echo "## 🐍 Backend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | $image_tag |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Size | $image_size |" >> $GITHUB_STEP_SUMMARY
          echo "| Layers | $(docker image inspect $image_tag --format '{{len .RootFS.Layers}}') |" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: |
            dist/
            docker-compose.yml
          retention-days: 7

      - name: 🔍 Set Build Status
        id: build-status
        run: |
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Backend build completed successfully"

  # 📋 构建状态汇总
  build-summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    if: always()
    timeout-minutes: 1
    steps:
      - name: 📊 Generate Build Report
        run: |
          echo "# 🔧 Intelligent Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Frontend Build | ${{ needs.frontend-build.result }} | ~2m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐍 Backend Build | ${{ needs.backend-build.result }} | ~3m |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 计算总体状态
          frontend_status="${{ needs.frontend-build.result }}"
          backend_status="${{ needs.backend-build.result }}"
          
          if [[ "$frontend_status" == "success" || "$frontend_status" == "skipped" ]] && 
             [[ "$backend_status" == "success" || "$backend_status" == "skipped" ]]; then
            echo "✅ **Build Status: SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "🚀 All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📦 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend Build: Available for deployment" >> $GITHUB_STEP_SUMMARY
            echo "- Backend Build: Docker image ready" >> $GITHUB_STEP_SUMMARY
            echo "- Build Cache: Optimized for future builds" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Build pipeline encountered issues" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🎯 Build Gate Decision
        run: |
          if [[ "${{ needs.frontend-build.result }}" == "failure" || 
                "${{ needs.backend-build.result }}" == "failure" ]]; then
            echo "❌ Build gate failed. Blocking pipeline progression."
            exit 1
          else
            echo "✅ Build gate passed. Artifacts ready for testing."
          fi