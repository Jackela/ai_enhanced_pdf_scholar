name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - critical
          - security
          - performance
          - workflow
          - rag
          - library
          - regression

jobs:
  e2e-tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']
        browser: [chromium, firefox, webkit]
        exclude:
          # Webkit doesn't work well on Windows
          - os: windows-latest
            browser: webkit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install playwright pytest-playwright
    
    - name: Install Playwright browsers
      run: |
        playwright install ${{ matrix.browser }}
        playwright install-deps ${{ matrix.browser }}
    
    - name: Set up test database
      run: |
        python -c "from src.database import init_db; init_db()"
    
    - name: Start backend server
      run: |
        python web_main.py --host localhost --port 8000 &
        sleep 10
      shell: bash
    
    - name: Run E2E tests
      env:
        PYTEST_BROWSER: ${{ matrix.browser }}
      run: |
        python tests_e2e/run_e2e_tests.py ${{ github.event.inputs.test_suite || 'ci' }} --parallel
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        path: |
          tests_e2e/reports/
          tests_e2e/screenshots/
          tests_e2e/videos/
          tests_e2e/traces/
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: tests_e2e/coverage/coverage.xml
        flags: e2e
        name: e2e-coverage
    
    - name: Publish test report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: E2E Test Results - ${{ matrix.os }} - ${{ matrix.browser }}
        path: tests_e2e/reports/junit*.xml
        reporter: java-junit

  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'performance'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install playwright pytest-playwright locust
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps
    
    - name: Start backend server
      run: |
        python web_main.py --host localhost --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        python tests_e2e/run_e2e_tests.py performance --parallel
    
    - name: Run load tests with Locust
      run: |
        locust -f tests_e2e/locustfile.py \
          --host http://localhost:8000 \
          --users 50 \
          --spawn-rate 5 \
          --run-time 5m \
          --headless \
          --html tests_e2e/reports/locust_report.html
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests_e2e/reports/

  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'pull_request' || github.event.inputs.test_suite == 'security'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install playwright pytest-playwright safety bandit
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps
    
    - name: Run security tests
      run: |
        python tests_e2e/run_e2e_tests.py security --parallel
    
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o tests_e2e/reports/bandit_report.json
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json > tests_e2e/reports/safety_report.json || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: tests_e2e/reports/

  visual-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install playwright pytest-playwright pillow
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps
    
    - name: Download visual baselines
      uses: actions/download-artifact@v3
      with:
        name: visual-baselines
        path: tests_e2e/visual_baselines/
      continue-on-error: true
    
    - name: Run visual regression tests
      run: |
        pytest tests_e2e/test_visual_regression.py -v
    
    - name: Upload visual regression results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: visual-regression-results
        path: |
          tests_e2e/visual_baselines/
          tests_e2e/screenshots/

  notify-results:
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-tests, visual-regression]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.e2e-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.security-tests.result }}" == "failure" ]]; then
          echo "Tests failed!"
          exit 1
        fi
        echo "All tests passed!"
    
    - name: Send Slack notification
      if: failure() && github.event_name != 'pull_request'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'E2E tests failed on ${{ github.ref }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}