name: 🔒 Security Advanced

on:
  workflow_call:
    inputs:
      frontend-changed:
        required: true
        type: string
      backend-changed:
        required: true
        type: string
      force-full:
        required: false
        type: string
        default: 'false'

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'

jobs:
  # 🐍 后端高级安全扫描
  backend-security-advanced:
    name: 🐍 Backend Security Advanced
    runs-on: ubuntu-latest
    timeout-minutes: 12
    if: inputs.backend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with Cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: 🔧 Security Tools Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .bandit
            .safety
            security-reports
          key: security-advanced-${{ runner.os }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            security-advanced-${{ runner.os }}-
            quality-deps-${{ runner.os }}-

      - name: 📦 Install Security Tools
        run: |
          echo "🔒 Installing advanced security scanning tools..."
          python -m pip install --upgrade pip --timeout 30
          
          # Install security analysis tools
          pip install --timeout 60 bandit safety semgrep
          
          # Install minimal dependencies for analysis
          if [ -f requirements-test.txt ]; then
            pip install --timeout 60 -r requirements-test.txt
          else
            pip install --timeout 60 fastapi pydantic
          fi
        timeout-minutes: 4

      - name: 🔍 Advanced Static Security Analysis (Bandit)
        run: |
          echo "🔍 Running advanced static security analysis with Bandit..."
          
          # Create security reports directory
          mkdir -p security-reports
          
          # Run Bandit with comprehensive checks
          bandit -r src/ \
            -f json \
            -o security-reports/bandit-detailed.json \
            -ll \
            -i || true  # Don't fail on findings, just report
          
          # Generate human-readable report
          bandit -r src/ \
            -f txt \
            -o security-reports/bandit-report.txt \
            -ll \
            -i || true
          
          # Parse and categorize results
          echo "## 🔍 Bandit Security Analysis" > security-reports/security-summary.md
          echo "" >> security-reports/security-summary.md
          
          if [ -f security-reports/bandit-detailed.json ]; then
            # Count issues by severity
            high_count=$(grep -c '"issue_severity": "HIGH"' security-reports/bandit-detailed.json 2>/dev/null || echo "0")
            medium_count=$(grep -c '"issue_severity": "MEDIUM"' security-reports/bandit-detailed.json 2>/dev/null || echo "0")
            low_count=$(grep -c '"issue_severity": "LOW"' security-reports/bandit-detailed.json 2>/dev/null || echo "0")
            
            echo "### Security Issue Summary" >> security-reports/security-summary.md
            echo "- **High Severity**: $high_count issues" >> security-reports/security-summary.md
            echo "- **Medium Severity**: $medium_count issues" >> security-reports/security-summary.md
            echo "- **Low Severity**: $low_count issues" >> security-reports/security-summary.md
            echo "" >> security-reports/security-summary.md
            
            # Security score calculation
            total_issues=$((high_count + medium_count + low_count))
            if [ $total_issues -eq 0 ]; then
              security_score=100
            else
              # Weighted scoring: High=10pts, Medium=5pts, Low=1pt
              weighted_score=$((high_count * 10 + medium_count * 5 + low_count * 1))
              security_score=$((100 - weighted_score))
              if [ $security_score -lt 0 ]; then
                security_score=0
              fi
            fi
            
            echo "### Security Score" >> security-reports/security-summary.md
            echo "**Score: ${security_score}/100**" >> security-reports/security-summary.md
            echo "" >> security-reports/security-summary.md
            
            # Security recommendations
            echo "### Recommendations" >> security-reports/security-summary.md
            if [ $high_count -gt 0 ]; then
              echo "- 🚨 **CRITICAL**: Address $high_count high-severity issues immediately" >> security-reports/security-summary.md
            fi
            if [ $medium_count -gt 0 ]; then
              echo "- ⚠️ **IMPORTANT**: Review $medium_count medium-severity issues" >> security-reports/security-summary.md
            fi
            if [ $low_count -gt 0 ]; then
              echo "- 📝 **CONSIDER**: Evaluate $low_count low-severity issues for improvement" >> security-reports/security-summary.md
            fi
            if [ $total_issues -eq 0 ]; then
              echo "- ✅ **EXCELLENT**: No security issues detected!" >> security-reports/security-summary.md
            fi
            
            echo "Bandit analysis complete:"
            echo "- High: $high_count, Medium: $medium_count, Low: $low_count"
            echo "- Security Score: $security_score/100"
          else
            echo "⚠️ Bandit report not generated"
          fi
        timeout-minutes: 4

      - name: 🛡️ Dependency Vulnerability Scan (Safety)
        run: |
          echo "🛡️ Scanning dependencies for known vulnerabilities..."
          
          # Run Safety check
          safety check \
            --json \
            --output security-reports/safety-report.json || true
          
          # Generate human-readable safety report
          safety check \
            --output security-reports/safety-report.txt || true
          
          # Parse Safety results
          echo "" >> security-reports/security-summary.md
          echo "## 🛡️ Dependency Vulnerability Analysis" >> security-reports/security-summary.md
          echo "" >> security-reports/security-summary.md
          
          if [ -f security-reports/safety-report.json ]; then
            # Count vulnerabilities
            vuln_count=$(jq '. | length' security-reports/safety-report.json 2>/dev/null || echo "0")
            
            echo "### Vulnerability Summary" >> security-reports/security-summary.md
            echo "- **Known Vulnerabilities**: $vuln_count" >> security-reports/security-summary.md
            echo "" >> security-reports/security-summary.md
            
            if [ "$vuln_count" = "0" ]; then
              echo "✅ **No known vulnerabilities found in dependencies**" >> security-reports/security-summary.md
            else
              echo "⚠️ **$vuln_count vulnerabilities found in dependencies**" >> security-reports/security-summary.md
              echo "- Review safety-report.txt for details" >> security-reports/security-summary.md
            fi
            
            echo "Safety scan complete: $vuln_count vulnerabilities found"
          else
            echo "⚠️ Safety scan results not available"
            echo "- **Safety Scan**: Unable to complete" >> security-reports/security-summary.md
          fi
        timeout-minutes: 3

      - name: 🔐 Advanced Pattern Analysis (Semgrep)
        run: |
          echo "🔐 Running advanced security pattern analysis..."
          
          # Run Semgrep with security rules
          semgrep \
            --config=auto \
            --json \
            --output=security-reports/semgrep-report.json \
            src/ || true
          
          # Generate human-readable semgrep report
          semgrep \
            --config=auto \
            --output=security-reports/semgrep-report.txt \
            src/ || true
          
          # Parse Semgrep results
          echo "" >> security-reports/security-summary.md
          echo "## 🔐 Advanced Pattern Analysis (Semgrep)" >> security-reports/security-summary.md
          echo "" >> security-reports/security-summary.md
          
          if [ -f security-reports/semgrep-report.json ]; then
            # Count findings by severity
            error_count=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' security-reports/semgrep-report.json 2>/dev/null || echo "0")
            warning_count=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' security-reports/semgrep-report.json 2>/dev/null || echo "0")
            info_count=$(jq '[.results[] | select(.extra.severity == "INFO")] | length' security-reports/semgrep-report.json 2>/dev/null || echo "0")
            
            total_findings=$((error_count + warning_count + info_count))
            
            echo "### Pattern Analysis Summary" >> security-reports/security-summary.md
            echo "- **Error Level**: $error_count findings" >> security-reports/security-summary.md
            echo "- **Warning Level**: $warning_count findings" >> security-reports/security-summary.md
            echo "- **Info Level**: $info_count findings" >> security-reports/security-summary.md
            echo "- **Total Findings**: $total_findings" >> security-reports/security-summary.md
            echo "" >> security-reports/security-summary.md
            
            if [ $total_findings -eq 0 ]; then
              echo "✅ **No security patterns detected**" >> security-reports/security-summary.md
            else
              echo "📊 **Security patterns detected - review recommended**" >> security-reports/security-summary.md
            fi
            
            echo "Semgrep analysis complete: $total_findings findings"
          else
            echo "⚠️ Semgrep analysis not available"
            echo "- **Pattern Analysis**: Unable to complete" >> security-reports/security-summary.md
          fi
        timeout-minutes: 4

      - name: 🎯 Security Quality Gates
        run: |
          echo "🎯 Evaluating security quality gates..."
          
          gate_passed=true
          
          # Check Bandit results
          if [ -f security-reports/bandit-detailed.json ]; then
            high_count=$(grep -c '"issue_severity": "HIGH"' security-reports/bandit-detailed.json 2>/dev/null || echo "0")
            
            if [ "$high_count" -gt 0 ]; then
              echo "❌ CRITICAL: $high_count high-severity security issues found"
              gate_passed=false
            else
              echo "✅ No high-severity security issues found"
            fi
          fi
          
          # Check Safety results
          if [ -f security-reports/safety-report.json ]; then
            vuln_count=$(jq '. | length' security-reports/safety-report.json 2>/dev/null || echo "0")
            
            if [ "$vuln_count" != "0" ] && [ "$vuln_count" -gt 5 ]; then
              echo "❌ CRITICAL: $vuln_count known vulnerabilities in dependencies"
              gate_passed=false
            elif [ "$vuln_count" != "0" ]; then
              echo "⚠️ WARNING: $vuln_count vulnerabilities found (under threshold)"
            else
              echo "✅ No known vulnerabilities in dependencies"
            fi
          fi
          
          # Check Semgrep results
          if [ -f security-reports/semgrep-report.json ]; then
            error_count=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' security-reports/semgrep-report.json 2>/dev/null || echo "0")
            
            if [ "$error_count" -gt 3 ]; then
              echo "❌ CRITICAL: $error_count error-level security patterns found"
              gate_passed=false
            else
              echo "✅ Error-level security patterns within threshold"
            fi
          fi
          
          # Final gate decision
          if [ "$gate_passed" = true ]; then
            echo "✅ All security quality gates passed"
          else
            echo "❌ Security quality gates failed"
            exit 1
          fi
        timeout-minutes: 1

      - name: 📤 Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-reports
          path: |
            security-reports/
          retention-days: 30  # Keep security reports longer

  # 🚀 前端安全扫描
  frontend-security-advanced:
    name: 🚀 Frontend Security Advanced
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.frontend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🔧 Frontend Security Cache
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            frontend/security-reports
          key: frontend-security-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-security-${{ runner.os }}-
            frontend-build-${{ runner.os }}-

      - name: 📦 Install Dependencies and Security Tools
        run: |
          cd frontend
          echo "📦 Installing dependencies and security tools..."
          
          # Install project dependencies
          npm ci --prefer-offline --no-audit --no-fund --silent
          
          # Install security scanning tools
          npm install --no-save eslint-plugin-security audit-ci retire
        timeout-minutes: 3

      - name: 🔍 NPM Audit Analysis
        run: |
          cd frontend
          echo "🔍 Running NPM security audit..."
          
          # Create security reports directory
          mkdir -p security-reports
          
          # Run npm audit with JSON output
          npm audit --json > security-reports/npm-audit.json || true
          
          # Generate human-readable audit report
          npm audit > security-reports/npm-audit.txt || true
          
          # Parse audit results
          echo "## 🔍 NPM Audit Analysis" > security-reports/frontend-security-summary.md
          echo "" >> security-reports/frontend-security-summary.md
          
          if [ -f security-reports/npm-audit.json ]; then
            # Extract vulnerability counts
            critical=$(jq '.metadata.vulnerabilities.critical // 0' security-reports/npm-audit.json)
            high=$(jq '.metadata.vulnerabilities.high // 0' security-reports/npm-audit.json)
            moderate=$(jq '.metadata.vulnerabilities.moderate // 0' security-reports/npm-audit.json)
            low=$(jq '.metadata.vulnerabilities.low // 0' security-reports/npm-audit.json)
            
            total_vulns=$((critical + high + moderate + low))
            
            echo "### NPM Audit Summary" >> security-reports/frontend-security-summary.md
            echo "- **Critical**: $critical vulnerabilities" >> security-reports/frontend-security-summary.md
            echo "- **High**: $high vulnerabilities" >> security-reports/frontend-security-summary.md
            echo "- **Moderate**: $moderate vulnerabilities" >> security-reports/frontend-security-summary.md
            echo "- **Low**: $low vulnerabilities" >> security-reports/frontend-security-summary.md
            echo "- **Total**: $total_vulns vulnerabilities" >> security-reports/frontend-security-summary.md
            echo "" >> security-reports/frontend-security-summary.md
            
            # Security assessment
            if [ $total_vulns -eq 0 ]; then
              echo "✅ **No vulnerabilities found**" >> security-reports/frontend-security-summary.md
            elif [ $critical -gt 0 ] || [ $high -gt 5 ]; then
              echo "🚨 **HIGH RISK**: Critical or multiple high-severity vulnerabilities" >> security-reports/frontend-security-summary.md
            elif [ $high -gt 0 ] || [ $moderate -gt 10 ]; then
              echo "⚠️ **MODERATE RISK**: Some vulnerabilities require attention" >> security-reports/frontend-security-summary.md
            else
              echo "📝 **LOW RISK**: Minor vulnerabilities detected" >> security-reports/frontend-security-summary.md
            fi
            
            echo "NPM Audit complete: $total_vulns vulnerabilities ($critical critical, $high high)"
          else
            echo "⚠️ NPM audit results not available"
          fi
        timeout-minutes: 3

      - name: 🔐 Dependency Security Check (Retire.js)
        run: |
          cd frontend
          echo "🔐 Checking for retired/vulnerable dependencies..."
          
          # Run retire.js
          npx retire \
            --outputformat json \
            --outputpath security-reports/retire-report.json \
            --path . || true
          
          # Generate human-readable retire report
          npx retire \
            --outputformat text \
            --outputpath security-reports/retire-report.txt \
            --path . || true
          
          # Parse retire.js results
          echo "" >> security-reports/frontend-security-summary.md
          echo "## 🔐 Retired Dependencies Analysis" >> security-reports/frontend-security-summary.md
          echo "" >> security-reports/frontend-security-summary.md
          
          if [ -f security-reports/retire-report.json ]; then
            # Count retired dependencies
            retired_count=$(jq '. | length' security-reports/retire-report.json 2>/dev/null || echo "0")
            
            echo "### Retired Dependencies Summary" >> security-reports/frontend-security-summary.md
            echo "- **Retired Dependencies**: $retired_count" >> security-reports/frontend-security-summary.md
            echo "" >> security-reports/frontend-security-summary.md
            
            if [ "$retired_count" = "0" ]; then
              echo "✅ **No retired dependencies found**" >> security-reports/frontend-security-summary.md
            else
              echo "⚠️ **$retired_count retired dependencies found**" >> security-reports/frontend-security-summary.md
              echo "- Review retire-report.txt for update recommendations" >> security-reports/frontend-security-summary.md
            fi
            
            echo "Retire.js scan complete: $retired_count retired dependencies"
          else
            echo "⚠️ Retire.js scan not available"
          fi
        timeout-minutes: 2

      - name: 🎯 Frontend Security Quality Gates
        run: |
          cd frontend
          echo "🎯 Evaluating frontend security quality gates..."
          
          gate_passed=true
          
          # Check NPM audit results
          if [ -f security-reports/npm-audit.json ]; then
            critical=$(jq '.metadata.vulnerabilities.critical // 0' security-reports/npm-audit.json)
            high=$(jq '.metadata.vulnerabilities.high // 0' security-reports/npm-audit.json)
            
            if [ "$critical" -gt 0 ]; then
              echo "❌ CRITICAL: $critical critical vulnerabilities in NPM dependencies"
              gate_passed=false
            elif [ "$high" -gt 10 ]; then
              echo "❌ CRITICAL: Too many high-severity vulnerabilities ($high)"
              gate_passed=false
            else
              echo "✅ NPM vulnerabilities within acceptable limits"
            fi
          fi
          
          # Check retired dependencies
          if [ -f security-reports/retire-report.json ]; then
            retired_count=$(jq '. | length' security-reports/retire-report.json 2>/dev/null || echo "0")
            
            if [ "$retired_count" -gt 5 ]; then
              echo "⚠️ WARNING: Many retired dependencies ($retired_count)"
              echo "::warning::Consider updating retired dependencies"
            else
              echo "✅ Retired dependencies within acceptable limits"
            fi
          fi
          
          # Final gate decision
          if [ "$gate_passed" = true ]; then
            echo "✅ Frontend security quality gates passed"
          else
            echo "❌ Frontend security quality gates failed"
            exit 1
          fi
        timeout-minutes: 1

      - name: 📤 Upload Frontend Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports
          path: |
            frontend/security-reports/
          retention-days: 30

  # 📊 安全汇总报告
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [backend-security-advanced, frontend-security-advanced]
    if: always()
    timeout-minutes: 3
    steps:
      - name: 📊 Generate Security Summary
        run: |
          echo "# 🔒 Advanced Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Analysis |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🐍 Backend Security | ${{ needs.backend-security-advanced.result }} | Bandit, Safety, Semgrep |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Frontend Security | ${{ needs.frontend-security-advanced.result }} | NPM Audit, Retire.js |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate security score
          backend_status="${{ needs.backend-security-advanced.result }}"
          frontend_status="${{ needs.frontend-security-advanced.result }}"
          
          passed_scans=0
          total_scans=0
          
          if [[ "$backend_status" == "success" ]]; then
            ((passed_scans++))
          elif [[ "$backend_status" == "skipped" ]]; then
            echo "⚠️ Backend security scans were skipped"
          fi
          
          if [[ "$frontend_status" == "success" ]]; then
            ((passed_scans++))
          elif [[ "$frontend_status" == "skipped" ]]; then
            echo "⚠️ Frontend security scans were skipped"
          fi
          
          # Count non-skipped scans
          [[ "$backend_status" != "skipped" ]] && ((total_scans++))
          [[ "$frontend_status" != "skipped" ]] && ((total_scans++))
          
          if [ $total_scans -eq 0 ]; then
            echo "⚠️ All security scans were skipped"
            echo "## ⚠️ Security Result: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            security_score=$((passed_scans * 100 / total_scans))
            
            echo "## 🔒 Security Metrics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Score**: ${security_score}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed Scans**: ${passed_scans}/${total_scans}" >> $GITHUB_STEP_SUMMARY
            echo "- **Analysis Tools**: Bandit, Safety, Semgrep, NPM Audit, Retire.js" >> $GITHUB_STEP_SUMMARY
            echo "- **Report Retention**: 30 days" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $security_score -eq 100 ]; then
              echo "🛡️ **Security Gate: EXCELLENT**" >> $GITHUB_STEP_SUMMARY
              echo "🎉 No security issues detected across all scans"
            elif [ $security_score -ge 75 ]; then
              echo "✅ **Security Gate: GOOD**" >> $GITHUB_STEP_SUMMARY
              echo "🎯 Security posture meets standards with minor issues"
            else
              echo "⚠️ **Security Gate: REQUIRES ATTENTION**" >> $GITHUB_STEP_SUMMARY
              echo "🔧 Security issues require immediate attention"
            fi
          fi

      - name: 🛡️ Security Gate Decision
        run: |
          backend_status="${{ needs.backend-security-advanced.result }}"
          frontend_status="${{ needs.frontend-security-advanced.result }}"
          
          failed_scans=0
          
          if [[ "$backend_status" == "failure" ]]; then
            echo "❌ Backend security scans failed"
            ((failed_scans++))
          fi
          
          if [[ "$frontend_status" == "failure" ]]; then
            echo "❌ Frontend security scans failed"
            ((failed_scans++))
          fi
          
          if [ $failed_scans -gt 0 ]; then
            echo "❌ Security gate failed with $failed_scans failed scans"
            exit 1
          else
            echo "✅ Security gate passed! Phase 3B validation complete"
          fi