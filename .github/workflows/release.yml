name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v2.1.3
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.1)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ============================================================================
  # Pre-Release Validation
  # ============================================================================
  validate:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_name: ${{ steps.version.outputs.release_name }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏷️ Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            IS_PRERELEASE="false"
          fi
          
          # Validate version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          
          RELEASE_NAME="AI Enhanced PDF Scholar $VERSION"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "## 🏷️ Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Name**: $RELEASE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      
      - name: 🧪 Run critical tests
        run: |
          echo "## 🧪 Pre-Release Test Results" >> $GITHUB_STEP_SUMMARY
          pytest tests/test_database_models.py tests/test_database_connection.py -v --tb=short
          echo "✅ Critical tests passed" >> $GITHUB_STEP_SUMMARY
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 🏗️ Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          echo "✅ Frontend build successful" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Build Release Artifacts
  # ============================================================================
  build:
    name: 📦 Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate
    timeout-minutes: 30
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            extension: tar.gz
          - os: windows-latest
            platform: windows
            extension: zip
          - os: macos-latest
            platform: macos
            extension: tar.gz
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd frontend && npm ci
      
      - name: 🏗️ Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: 📦 Create release package
        shell: bash
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PLATFORM="${{ matrix.platform }}"
          PACKAGE_NAME="ai-enhanced-pdf-scholar-${VERSION}-${PLATFORM}"
          
          # Create package directory
          mkdir -p release/${PACKAGE_NAME}
          
          # Copy application files
          cp -r src/ release/${PACKAGE_NAME}/
          cp -r backend/ release/${PACKAGE_NAME}/
          cp -r frontend/dist/ release/${PACKAGE_NAME}/frontend/
          cp requirements.txt release/${PACKAGE_NAME}/
          cp web_main.py release/${PACKAGE_NAME}/
          cp config.py release/${PACKAGE_NAME}/
          
          # Copy documentation
          cp README.md release/${PACKAGE_NAME}/
          cp PROJECT_DOCS.md release/${PACKAGE_NAME}/
          cp API_ENDPOINTS.md release/${PACKAGE_NAME}/
          cp TECHNICAL_DESIGN.md release/${PACKAGE_NAME}/
          
          # Create startup scripts
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cat > release/${PACKAGE_NAME}/start.bat << 'EOF'
          @echo off
          echo 🚀 AI Enhanced PDF Scholar ${VERSION}
          echo Installing dependencies...
          python -m pip install -r requirements.txt
          echo Starting server...
          python web_main.py --host 0.0.0.0 --port 8000
          EOF
            
            cat > release/${PACKAGE_NAME}/install.bat << 'EOF'
          @echo off
          echo 📦 Installing AI Enhanced PDF Scholar...
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          echo ✅ Installation complete!
          echo Run start.bat to launch the application
          EOF
          else
            cat > release/${PACKAGE_NAME}/start.sh << 'EOF'
          #!/bin/bash
          echo "🚀 AI Enhanced PDF Scholar ${VERSION}"
          echo "Installing dependencies..."
          python -m pip install -r requirements.txt
          echo "Starting server..."
          python web_main.py --host 0.0.0.0 --port 8000
          EOF
            
            cat > release/${PACKAGE_NAME}/install.sh << 'EOF'
          #!/bin/bash
          echo "📦 Installing AI Enhanced PDF Scholar..."
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          echo "✅ Installation complete!"
          echo "Run ./start.sh to launch the application"
          EOF
            
            chmod +x release/${PACKAGE_NAME}/start.sh
            chmod +x release/${PACKAGE_NAME}/install.sh
          fi
          
          # Create version info
          cat > release/${PACKAGE_NAME}/VERSION << EOF
          AI Enhanced PDF Scholar
          Version: ${VERSION}
          Platform: ${PLATFORM}
          Build Date: $(date -u)
          Commit: ${{ github.sha }}
          EOF
          
          # Create README for release
          cat > release/${PACKAGE_NAME}/RELEASE_README.md << EOF
          # AI Enhanced PDF Scholar ${VERSION}
          
          ## 🚀 Quick Start
          
          ### Prerequisites
          - Python 3.10 or higher
          - At least 2GB RAM
          - 1GB free disk space
          
          ### Installation
          1. Extract this archive
          2. Run the install script:
             - Windows: Double-click \`install.bat\`
             - Linux/macOS: Run \`./install.sh\`
          
          ### Running
          1. Run the startup script:
             - Windows: Double-click \`start.bat\`
             - Linux/macOS: Run \`./start.sh\`
          2. Open your browser to http://localhost:8000
          
          ### Configuration
          - Set your Google Gemini API key in the settings panel
          - See PROJECT_DOCS.md for detailed documentation
          
          ## 📚 Documentation
          - **PROJECT_DOCS.md**: Complete project documentation
          - **API_ENDPOINTS.md**: API reference
          - **TECHNICAL_DESIGN.md**: Technical architecture details
          
          ## 🆘 Support
          - GitHub Issues: https://github.com/Jackela/ai_enhanced_pdf_scholar/issues
          - Documentation: See included markdown files
          
          ---
          Built with ❤️ using FastAPI, React, and LlamaIndex
          EOF
      
      - name: 📦 Create archive
        shell: bash
        run: |
          cd release
          PACKAGE_NAME="ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-${{ matrix.platform }}"
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            # Use PowerShell to create zip on Windows
            powershell -Command "Compress-Archive -Path '${PACKAGE_NAME}' -DestinationPath '${PACKAGE_NAME}.zip'"
          else
            tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}/"
          fi
      
      - name: 📤 Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: release/ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-${{ matrix.platform }}.${{ matrix.extension }}
          retention-days: 30

  # ============================================================================
  # Create GitHub Release
  # ============================================================================
  release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    timeout-minutes: 10
    
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 📝 Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges -10)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          # 🚀 AI Enhanced PDF Scholar ${VERSION}
          
          ## ✨ What's New
          
          This release includes the latest improvements to the AI Enhanced PDF Scholar platform, featuring a modern web interface, enhanced RAG capabilities, and robust document management.
          
          ## 📦 Downloads
          
          Choose the package for your platform:
          - **Windows**: \`ai-enhanced-pdf-scholar-${VERSION}-windows.zip\`
          - **Linux**: \`ai-enhanced-pdf-scholar-${VERSION}-linux.tar.gz\`
          - **macOS**: \`ai-enhanced-pdf-scholar-${VERSION}-macos.tar.gz\`
          
          ## 🔧 Installation
          
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the installation script (\`install.bat\` on Windows, \`./install.sh\` on Linux/macOS)
          4. Start the application (\`start.bat\` on Windows, \`./start.sh\` on Linux/macOS)
          5. Open http://localhost:8000 in your browser
          
          ## 📋 Requirements
          
          - Python 3.10 or higher
          - At least 2GB RAM
          - 1GB free disk space
          - Google Gemini API key (for AI features)
          
          ## 🔄 Changes in this Release
          
          EOF
          
          if [ -n "$COMMITS" ]; then
            echo "### 📝 Recent Changes" >> release_notes.md
            echo "$COMMITS" | while read line; do
              echo "- $line" >> release_notes.md
            done
          else
            echo "### 📝 Initial Release" >> release_notes.md
            echo "- Complete web-based PDF document management system" >> release_notes.md
            echo "- AI-powered document analysis with RAG capabilities" >> release_notes.md
            echo "- Modern React frontend with TypeScript" >> release_notes.md
            echo "- FastAPI backend with SQLite database" >> release_notes.md
            echo "- Comprehensive testing and CI/CD pipeline" >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF
          
          ## 🆘 Support & Documentation
          
          - 📚 **Full Documentation**: See \`PROJECT_DOCS.md\` in the package
          - 🔗 **API Reference**: See \`API_ENDPOINTS.md\` in the package
          - 🐛 **Issue Tracker**: https://github.com/Jackela/ai_enhanced_pdf_scholar/issues
          - 💬 **Discussions**: https://github.com/Jackela/ai_enhanced_pdf_scholar/discussions
          
          ## 🔒 Security
          
          This release has been scanned for security vulnerabilities and license compliance. All dependencies are up to date as of the release date.
          
          ---
          
          **Full Changelog**: https://github.com/Jackela/ai_enhanced_pdf_scholar/compare/${LAST_TAG}...${VERSION}
          EOF
          
          # Set output for use in release creation
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.validate.outputs.release_name }}
          tag_name: ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          draft: false
          files: |
            artifacts/release-linux/ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-linux.tar.gz
            artifacts/release-windows/ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-windows.zip
            artifacts/release-macos/ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-macos.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📊 Release summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Name**: ${{ needs.validate.outputs.release_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: Linux, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Available Downloads**:" >> $GITHUB_STEP_SUMMARY
          echo "- ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-linux.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "- ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-windows.zip" >> $GITHUB_STEP_SUMMARY
          echo "- ai-enhanced-pdf-scholar-${{ needs.validate.outputs.version }}-macos.tar.gz" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Post-Release Tasks
  # ============================================================================
  post-release:
    name: 📮 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: always() && needs.release.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏷️ Update development version
        if: needs.validate.outputs.is_prerelease == 'false'
        run: |
          # This could update version files, create development branches, etc.
          echo "✅ Release ${{ needs.validate.outputs.version }} completed successfully"
          echo "🔄 Consider updating version numbers for next development cycle"
      
      - name: 📊 Post-release summary
        run: |
          echo "## 📮 Post-Release Tasks Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Release ${{ needs.validate.outputs.version }} is now available" >> $GITHUB_STEP_SUMMARY
          echo "✅ All platform packages have been created" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub release has been published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Next Steps**:" >> $GITHUB_STEP_SUMMARY
          echo "- 📢 Announce the release" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Plan next development cycle" >> $GITHUB_STEP_SUMMARY