name: CI Quality Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      frontend-changed:
        required: false
        type: string
        default: 'true'
      backend-changed:
        required: false
        type: string
        default: 'true'
      force-full:
        required: false
        type: string
        default: 'true'

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'

jobs:
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'push' || github.event_name == 'pull_request' || inputs.backend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Code Quality Check
        run: |
          echo "Running Python code quality check..."
          ruff check src --select=F821,F401,F841,E999 --line-length=88 --output-format=github

  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' || github.event_name == 'pull_request' || inputs.backend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Test Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov PyMuPDF pydantic fastapi aiofiles psutil tenacity cachetools
          echo "Installed core testing dependencies"

      - name: Run Basic Tests
        run: |
          echo "Running basic repository and citation tests..."
          pytest tests/test_citation_repositories.py tests/repositories/test_base_repository.py -v --cov=src --cov-report=xml --cov-fail-under=10

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [python-quality, basic-tests]
    if: always()
    timeout-minutes: 1
    steps:
      - name: Quality Gate Decision
        run: |
          failed_count=0
          
          [[ "${{ needs.python-quality.result }}" == "failure" ]] && ((failed_count++))
          [[ "${{ needs.basic-tests.result }}" == "failure" ]] && ((failed_count++))
          
          echo "Quality gate analysis:"
          echo "- Python Quality: ${{ needs.python-quality.result }}"
          echo "- Basic Tests: ${{ needs.basic-tests.result }}"
          echo "- Failed jobs: $failed_count"
          
          if [ $failed_count -gt 0 ]; then
            echo "Quality gate failed."
            exit 1
          else
            echo "Quality gate passed!"
          fi