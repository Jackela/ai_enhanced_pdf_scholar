name: 🧪 Comprehensive Testing

on:
  workflow_call:
    inputs:
      frontend-changed:
        required: true
        type: string
      backend-changed:
        required: true
        type: string

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'
  PLAYWRIGHT_VERSION: '1.48.0'

jobs:
  # 🔗 集成测试
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 6
    if: inputs.backend-changed == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🔧 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: integration-deps-${{ runner.os }}-${{ hashFiles('requirements*.txt') }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov httpx
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        timeout-minutes: 2

      - name: 🔧 Setup Test Environment
        run: |
          # 创建测试配置
          cat > test_config.py << EOF
          DATABASE_URL = "postgresql://postgres:testpass@localhost:5432/testdb"
          TESTING = True
          SECRET_KEY = "test-secret-key"
          GEMINI_API_KEY = "test-api-key"
          EOF
          
          # 初始化测试数据库
          python -c "
          import asyncio
          from src.database import init_database
          asyncio.run(init_database())
          "

      - name: 🧪 Run API Integration Tests
        run: |
          echo "🧪 Running API integration tests..."
          pytest tests/integration/test_api.py -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=api-test-results.xml \
            --tb=short
        timeout-minutes: 4

      - name: 🧪 Run Database Integration Tests
        run: |
          echo "🧪 Running database integration tests..."
          pytest tests/integration/test_database.py -v \
            --cov=src \
            --cov-append \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=db-test-results.xml \
            --tb=short
        timeout-minutes: 2

      - name: 🧪 Run RAG Pipeline Tests
        run: |
          echo "🧪 Running RAG pipeline tests..."
          pytest tests/integration/test_rag.py -v \
            --cov=src \
            --cov-append \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=rag-test-results.xml \
            --tb=short
        timeout-minutes: 3

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            *-test-results.xml
            htmlcov/
            coverage.xml
          retention-days: 7

  # 🎭 E2E 测试
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: inputs.frontend-changed == 'true' || inputs.backend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🔧 Cache Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            frontend/node_modules
          key: playwright-${{ runner.os }}-${{ env.PLAYWRIGHT_VERSION }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: 📦 Install Dependencies
        run: |
          # 安装前端依赖
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund
          
          # 安装后端依赖
          cd ..
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        timeout-minutes: 3

      - name: 🎭 Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps chromium firefox webkit
        timeout-minutes: 2

      - name: 🏗️ Build Frontend
        run: |
          cd frontend
          npm run build
        timeout-minutes: 2

      - name: 🚀 Start Application
        run: |
          # 启动后端
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          BACKEND_PID=$!
          
          # 启动前端
          cd frontend
          npm run preview -- --host 0.0.0.0 --port 3000 &
          FRONTEND_PID=$!
          
          # 等待服务启动
          sleep 10
          
          # 保存PID用于清理
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          
          # 验证服务运行
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1
          
          echo "✅ Application started successfully"

      - name: 🧪 Run E2E Tests
        run: |
          cd frontend
          npx playwright test --reporter=html --reporter=junit
        timeout-minutes: 5

      - name: 🧹 Cleanup
        if: always()
        run: |
          # 停止服务
          kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true

      - name: 📊 Upload E2E Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/results.xml
          retention-days: 7

  # 🧩 组件测试
  component-tests:
    name: 🧩 Component Tests
    runs-on: ubuntu-latest
    timeout-minutes: 4
    if: inputs.frontend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🔧 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            frontend/.jest-cache
          key: component-test-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund
        timeout-minutes: 2

      - name: 🧪 Run Component Tests
        run: |
          cd frontend
          npm test -- \
            --coverage \
            --watchAll=false \
            --maxWorkers=2 \
            --testResultsProcessor=jest-junit \
            --coverageReporters=text-lcov \
            --coverageReporters=html \
            --coverageReporters=json
        timeout-minutes: 3

      - name: 📊 Upload Component Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: component-test-results
          path: |
            frontend/coverage/
            frontend/junit.xml
          retention-days: 7

  # 🔄 API 测试
  api-tests:
    name: 🔄 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: inputs.backend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        timeout-minutes: 2

      - name: 🚀 Start API Server
        run: |
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          
          # 等待API启动
          sleep 5
          curl -f http://localhost:8000/health || exit 1
          echo "✅ API server started"

      - name: 🧪 Run API Tests
        run: |
          pytest tests/api/ -v \
            --junitxml=api-test-results.xml \
            --tb=short
        timeout-minutes: 3

      - name: 🧹 Cleanup
        if: always()
        run: |
          kill $API_PID 2>/dev/null || true

      - name: 📊 Upload API Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: api-test-results.xml
          retention-days: 7

  # 📋 测试汇总
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, component-tests, api-tests]
    if: always()
    timeout-minutes: 1
    steps:
      - name: 📊 Generate Test Report
        run: |
          echo "# 🧪 Comprehensive Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 Integration Tests | ${{ needs.integration-tests.result }} | ~5m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎭 E2E Tests | ${{ needs.e2e-tests.result }} | ~6m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧩 Component Tests | ${{ needs.component-tests.result }} | ~3m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 API Tests | ${{ needs.api-tests.result }} | ~4m |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 计算测试通过率
          total_tests=4
          passed_tests=0
          
          [[ "${{ needs.integration-tests.result }}" == "success" || "${{ needs.integration-tests.result }}" == "skipped" ]] && ((passed_tests++))
          [[ "${{ needs.e2e-tests.result }}" == "success" || "${{ needs.e2e-tests.result }}" == "skipped" ]] && ((passed_tests++))
          [[ "${{ needs.component-tests.result }}" == "success" || "${{ needs.component-tests.result }}" == "skipped" ]] && ((passed_tests++))
          [[ "${{ needs.api-tests.result }}" == "success" || "${{ needs.api-tests.result }}" == "skipped" ]] && ((passed_tests++))
          
          success_rate=$((passed_tests * 100 / total_tests))
          
          echo "## 📊 Test Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Duration**: ~8 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage**: Generated for all suites" >> $GITHUB_STEP_SUMMARY
          
          if [ $success_rate -ge 95 ]; then
            echo "✅ **Test Gate: PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Test Gate: FAILED**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🎯 Test Gate Decision
        run: |
          # 检查关键测试是否通过
          if [[ "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "❌ Critical tests failed. Blocking pipeline progression."
            exit 1
          else
            echo "✅ Test gate passed. Quality assured for deployment."
          fi