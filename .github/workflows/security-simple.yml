name: 🔒 Security Check (Simple)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-check:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt
          cd frontend && npm ci
      
      - name: 🔍 Python security scan
        run: |
          echo "## 🐍 Python Security Scan" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ backend/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            ISSUE_COUNT=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            echo "Found $ISSUE_COUNT potential security issues" >> $GITHUB_STEP_SUMMARY
            if [ "$ISSUE_COUNT" -gt 0 ]; then
              HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json 2>/dev/null || echo "0")
              if [ "$HIGH_COUNT" -gt 0 ]; then
                echo "❌ High severity issues found: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ Only medium/low severity issues found" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "✅ No security issues found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 🔍 Frontend security scan
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎨 Frontend Security Scan" >> $GITHUB_STEP_SUMMARY
          cd frontend
          npm audit --audit-level=high --json > ../npm-audit-report.json || true
          cd ..
          if [ -f npm-audit-report.json ]; then
            HIGH_COUNT=$(jq '.metadata.vulnerabilities.high' npm-audit-report.json 2>/dev/null || echo "0")
            CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical' npm-audit-report.json 2>/dev/null || echo "0")
            TOTAL_COUNT=$(jq '.metadata.vulnerabilities.total' npm-audit-report.json 2>/dev/null || echo "0")
            
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "❌ High/Critical vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
              echo "- Critical: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- High: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
            elif [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "⚠️ Only moderate vulnerabilities found: $TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 🔍 Basic secrets check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Secrets Check" >> $GITHUB_STEP_SUMMARY
          # Check for common secret patterns
          SECRET_FOUND=false
          
          # Check for hardcoded API keys
          if grep -r -i "api_key\s*=\s*['\"][^'\"]\{10,\}['\"]" --include="*.py" --include="*.ts" --include="*.tsx" . 2>/dev/null; then
            echo "⚠️ Potential hardcoded API keys found" >> $GITHUB_STEP_SUMMARY
            SECRET_FOUND=true
          fi
          
          # Check for passwords
          if grep -r -i "password\s*=\s*['\"][^'\"]\{8,\}['\"]" --include="*.py" --include="*.ts" --include="*.tsx" . 2>/dev/null; then
            echo "⚠️ Potential hardcoded passwords found" >> $GITHUB_STEP_SUMMARY
            SECRET_FOUND=true
          fi
          
          if [ "$SECRET_FOUND" = false ]; then
            echo "✅ No obvious secrets found" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            npm-audit-report.json
          retention-days: 30
      
      - name: 📊 Security summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🐍 Python security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 Frontend security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Basic secrets check completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 For detailed results, check the step outputs above" >> $GITHUB_STEP_SUMMARY