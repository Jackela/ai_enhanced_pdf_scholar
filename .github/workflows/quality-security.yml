name: 🛡️ Quality & Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      security_level:
        description: 'Security scan level'
        required: false
        default: 'standard'
        type: choice
        options: ['basic', 'standard', 'comprehensive']
      skip_dependency_check:
        description: 'Skip dependency vulnerability check'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '22'
  TIMEOUT_STANDARD: 15
  TIMEOUT_QUICK: 5
  TIMEOUT_EXTENDED: 30
  SECURITY_LEVEL: ${{ github.event.inputs.security_level || 'standard' }}

concurrency:
  group: quality-security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Advanced code quality analysis
  code-quality:
    name: ✨ Advanced Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      quality-score: ${{ steps.quality-metrics.outputs.score }}
      critical-issues: ${{ steps.quality-metrics.outputs.critical }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install Quality Tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint bandit safety radon complexity-report
          pip install -r requirements.txt || true

      - name: 📊 Complexity Analysis
        run: |
          radon cc src/ --total-average --show-complexity -nb || true
          radon mi src/ --show --multi || true
          echo "## 📊 Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
          radon cc src/ --total-average --show-complexity -nb >> $GITHUB_STEP_SUMMARY || true

      - name: 🔍 Advanced Linting (Pylint)
        run: |
          pylint src/ --output-format=text --score=yes --exit-zero > pylint-report.txt
          echo "## 🔍 Pylint Analysis" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 10 pylint-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 📋 Quality Metrics
        id: quality-metrics
        run: |
          # Calculate basic quality metrics
          PYLINT_SCORE=$(grep "Your code has been rated" pylint-report.txt | grep -o "[0-9]\+\.[0-9]\+" | head -1 || echo "0.0")
          CRITICAL_ISSUES=$(grep -c "CRITICAL\|ERROR" pylint-report.txt || echo "0")
          echo "score=$PYLINT_SCORE" >> $GITHUB_OUTPUT
          echo "critical=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "Quality Score: $PYLINT_SCORE" >> $GITHUB_STEP_SUMMARY
          echo "Critical Issues: $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY

      - name: 📦 Upload Quality Reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ github.sha }}
          path: |
            pylint-report.txt
          retention-days: 30

  # Security vulnerability scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      vulnerabilities-found: ${{ steps.security-results.outputs.vulnerabilities }}
      risk-level: ${{ steps.security-results.outputs.risk }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🛡️ Bandit Security Linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt || true
          echo "## 🛡️ Bandit Security Analysis" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Dependency Vulnerability Check
        if: github.event.inputs.skip_dependency_check != 'true'
        run: |
          safety check --json --output safety-report.json || true
          safety check || true
          echo "## 🔍 Dependency Security Check" >> $GITHUB_STEP_SUMMARY

      - name: 🔎 Advanced Static Analysis (Semgrep)
        if: env.SECURITY_LEVEL == 'comprehensive'
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/ || true
          echo "## 🔎 Advanced Static Analysis" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Security Results Summary
        id: security-results
        run: |
          # Aggregate security findings
          BANDIT_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          SAFETY_VULNS=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
          TOTAL_VULNS=$((BANDIT_ISSUES + SAFETY_VULNS))
          
          if [ $TOTAL_VULNS -eq 0 ]; then
            RISK_LEVEL="low"
          elif [ $TOTAL_VULNS -lt 5 ]; then
            RISK_LEVEL="medium"
          else
            RISK_LEVEL="high"
          fi
          
          echo "vulnerabilities=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "risk=$RISK_LEVEL" >> $GITHUB_OUTPUT
          
          echo "## 📊 Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Vulnerabilities:** $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- **Risk Level:** $RISK_LEVEL" >> $GITHUB_STEP_SUMMARY
          echo "- **Bandit Issues:** $BANDIT_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Vulnerabilities:** $SAFETY_VULNS" >> $GITHUB_STEP_SUMMARY

      - name: 📦 Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
          retention-days: 90

  # Frontend security and quality
  frontend-security:
    name: 🎨 Frontend Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔧 Install Dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install --save-dev eslint-plugin-security @typescript-eslint/eslint-plugin

      - name: 🔍 Security Audit (npm)
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate || true
          npm audit --json > npm-audit.json || true
          echo "## 🔍 NPM Security Audit" >> $GITHUB_STEP_SUMMARY

      - name: 🛡️ ESLint Security Rules
        working-directory: ./frontend
        run: |
          npx eslint src/ --ext .ts,.tsx,.js,.jsx -c .eslintrc.js --format json > eslint-security.json || true
          npx eslint src/ --ext .ts,.tsx,.js,.jsx || true

      - name: 📦 Upload Frontend Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports-${{ github.sha }}
          path: |
            frontend/npm-audit.json
            frontend/eslint-security.json
          retention-days: 30

  # Code coverage analysis
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 🧪 Generate Coverage Report
        run: |
          pytest tests/ --cov=src --cov-report=html --cov-report=xml --cov-report=term
          coverage report --show-missing

      - name: 📊 Coverage Summary
        run: |
          COVERAGE_PERCENT=$(coverage report --format=total)
          echo "## 📊 Test Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Coverage:** ${COVERAGE_PERCENT}%" >> $GITHUB_STEP_SUMMARY
          echo "coverage-percent=${COVERAGE_PERCENT}" >> $GITHUB_ENV

      - name: 📦 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.sha }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

  # Quality gate enforcement
  quality-gate:
    name: 🚪 Quality Gate
    needs: [code-quality, security-scan, coverage-analysis]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📊 Quality Gate Evaluation
        run: |
          echo "## 🚪 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Status | Value | Threshold |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|-------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          # Quality Score Check
          QUALITY_SCORE="${{ needs.code-quality.outputs.quality-score }}"
          if (( $(echo "$QUALITY_SCORE > 7.0" | bc -l) )); then
            echo "| Code Quality | ✅ PASS | $QUALITY_SCORE/10 | > 7.0 |" >> $GITHUB_STEP_SUMMARY
            QUALITY_PASS=true
          else
            echo "| Code Quality | ❌ FAIL | $QUALITY_SCORE/10 | > 7.0 |" >> $GITHUB_STEP_SUMMARY
            QUALITY_PASS=false
          fi
          
          # Security Risk Check
          SECURITY_RISK="${{ needs.security-scan.outputs.risk-level }}"
          if [ "$SECURITY_RISK" != "high" ]; then
            echo "| Security Risk | ✅ PASS | $SECURITY_RISK | < high |" >> $GITHUB_STEP_SUMMARY
            SECURITY_PASS=true
          else
            echo "| Security Risk | ❌ FAIL | $SECURITY_RISK | < high |" >> $GITHUB_STEP_SUMMARY
            SECURITY_PASS=false
          fi
          
          # Critical Issues Check
          CRITICAL_ISSUES="${{ needs.code-quality.outputs.critical-issues }}"
          if [ "$CRITICAL_ISSUES" -lt "5" ]; then
            echo "| Critical Issues | ✅ PASS | $CRITICAL_ISSUES | < 5 |" >> $GITHUB_STEP_SUMMARY
            CRITICAL_PASS=true
          else
            echo "| Critical Issues | ❌ FAIL | $CRITICAL_ISSUES | < 5 |" >> $GITHUB_STEP_SUMMARY
            CRITICAL_PASS=false
          fi
          
          # Overall Gate Status
          if $QUALITY_PASS && $SECURITY_PASS && $CRITICAL_PASS; then
            echo "| **Overall** | ✅ **PASSED** | All checks passed | - |" >> $GITHUB_STEP_SUMMARY
            echo "QUALITY_GATE_PASSED=true" >> $GITHUB_ENV
          else
            echo "| **Overall** | ❌ **FAILED** | Quality gate failed | - |" >> $GITHUB_STEP_SUMMARY
            echo "QUALITY_GATE_PASSED=false" >> $GITHUB_ENV
          fi

      - name: 🚨 Fail on Quality Gate Failure
        if: env.QUALITY_GATE_PASSED == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Quality gate failed for main branch push. Blocking deployment."
          exit 1

      - name: ⚠️ Quality Gate Warning
        if: env.QUALITY_GATE_PASSED == 'false' && (github.event_name == 'pull_request' || github.ref != 'refs/heads/main')
        run: |
          echo "Quality gate failed. Please address the issues before merging to main."
          echo "This is a warning for non-main branch pushes and pull requests."