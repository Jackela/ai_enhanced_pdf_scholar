name: ⚡ Quality Lightning

on:
  workflow_call:
    inputs:
      frontend-changed:
        required: true
        type: string
      backend-changed:
        required: true
        type: string
      force-full:
        required: false
        type: string
        default: 'false'

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9.15.1'

jobs:
  # 🧹 前端代码质量检查
  frontend-quality:
    name: 🧹 Frontend Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: inputs.frontend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js with Turbo Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 📦 Install Dependencies (Fast)
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund
        timeout-minutes: 1

      - name: 🔍 ESLint Check
        run: |
          cd frontend
          npx eslint src --ext .ts,.tsx --format=compact --max-warnings=0
        timeout-minutes: 1

      - name: 🎨 Prettier Check
        run: |
          cd frontend
          npx prettier --check "src/**/*.{ts,tsx,css,json}"
        timeout-minutes: 1

      - name: 📊 Upload Frontend Quality Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-quality-report
          path: frontend/eslint-report.json
          retention-days: 3

  # 🔍 TypeScript 类型检查
  typescript-check:
    name: 🔍 TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: inputs.frontend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund

      - name: 🔍 TypeScript Check
        run: |
          cd frontend
          npx tsc --noEmit --incremental --tsBuildInfoFile .tsbuildinfo
        timeout-minutes: 1

      - name: 📊 Cache TypeScript Build Info
        uses: actions/cache@v4
        with:
          path: frontend/.tsbuildinfo
          key: typescript-${{ runner.os }}-${{ hashFiles('frontend/tsconfig.json', 'frontend/src/**/*.ts', 'frontend/src/**/*.tsx') }}

  # 🐍 Python 代码质量检查
  python-quality:
    name: 🐍 Python Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: inputs.backend-changed == 'true' || inputs.force-full == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with Cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        timeout-minutes: 1

      - name: 🔍 Ruff Linting
        run: |
          ruff check src --output-format=github --select=E,W,F,UP,B,SIM,I,N,ERA,PL,RUF
        timeout-minutes: 1

      - name: 🔍 MyPy Type Check
        run: |
          mypy src --ignore-missing-imports --check-untyped-defs
        timeout-minutes: 1

      - name: 🎨 Black Formatting Check
        run: |
          black --check --diff src
        timeout-minutes: 1

      - name: 📊 Upload Python Quality Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-quality-report
          path: |
            ruff-report.json
            mypy-report.json
          retention-days: 3

  # 🚀 快速单元测试
  unit-tests-fast:
    name: 🚀 Fast Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: inputs.frontend-changed == 'true' || inputs.force-full == 'true' || inputs.backend-changed == 'true'
    strategy:
      matrix:
        test-suite: [frontend, backend]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js (Frontend)
        if: matrix.test-suite == 'frontend' && (inputs.frontend-changed == 'true' || inputs.force-full == 'true')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🐍 Setup Python (Backend)
        if: matrix.test-suite == 'backend' && (inputs.backend-changed == 'true' || inputs.force-full == 'true')
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Frontend Dependencies
        if: matrix.test-suite == 'frontend' && (inputs.frontend-changed == 'true' || inputs.force-full == 'true')
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund

      - name: 📦 Install Backend Dependencies
        if: matrix.test-suite == 'backend' && (inputs.backend-changed == 'true' || inputs.force-full == 'true')
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 🧪 Run Frontend Tests
        if: matrix.test-suite == 'frontend' && (inputs.frontend-changed == 'true' || inputs.force-full == 'true')
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --maxWorkers=2
        timeout-minutes: 2

      - name: 🧪 Run Backend Tests
        if: matrix.test-suite == 'backend' && (inputs.backend-changed == 'true' || inputs.force-full == 'true')
        run: |
          pytest tests/unit -v --cov=src --cov-report=xml --cov-report=html -n auto
        timeout-minutes: 2

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-suite }}-test-results
          path: |
            frontend/coverage/
            htmlcov/
            coverage.xml
          retention-days: 3

  # 📋 质量检查汇总
  quality-summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    needs: [frontend-quality, typescript-check, python-quality, unit-tests-fast]
    if: always()
    timeout-minutes: 1
    steps:
      - name: 📊 Generate Quality Report
        run: |
          echo "# ⚡ Quality Lightning Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Frontend Quality | ${{ needs.frontend-quality.result }} | ~1m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 TypeScript Check | ${{ needs.typescript-check.result }} | ~1m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐍 Python Quality | ${{ needs.python-quality.result }} | ~1m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Unit Tests | ${{ needs.unit-tests-fast.result }} | ~2m |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 计算成功率 - 只考虑实际执行的作业
          total_jobs=0
          successful_jobs=0
          failed_jobs=0
          
          # 统计各作业状态 - 只统计实际执行的作业
          if [[ "${{ needs.frontend-quality.result }}" != "skipped" ]]; then
            ((total_jobs++))
            [[ "${{ needs.frontend-quality.result }}" == "success" ]] && ((successful_jobs++))
            [[ "${{ needs.frontend-quality.result }}" == "failure" ]] && ((failed_jobs++))
          fi
          
          if [[ "${{ needs.typescript-check.result }}" != "skipped" ]]; then
            ((total_jobs++))
            [[ "${{ needs.typescript-check.result }}" == "success" ]] && ((successful_jobs++))
            [[ "${{ needs.typescript-check.result }}" == "failure" ]] && ((failed_jobs++))
          fi
          
          if [[ "${{ needs.python-quality.result }}" != "skipped" ]]; then
            ((total_jobs++))
            [[ "${{ needs.python-quality.result }}" == "success" ]] && ((successful_jobs++))
            [[ "${{ needs.python-quality.result }}" == "failure" ]] && ((failed_jobs++))
          fi
          
          if [[ "${{ needs.unit-tests-fast.result }}" != "skipped" ]]; then
            ((total_jobs++))
            [[ "${{ needs.unit-tests-fast.result }}" == "success" ]] && ((successful_jobs++))
            [[ "${{ needs.unit-tests-fast.result }}" == "failure" ]] && ((failed_jobs++))
          fi
          
          # 计算成功率
          if [ $total_jobs -gt 0 ]; then
            success_rate=$((successful_jobs * 100 / total_jobs))
          else
            success_rate=100  # 如果没有任务执行，认为是成功的
          fi
          
          echo "Debug: total_jobs=$total_jobs, successful_jobs=$successful_jobs, failed_jobs=$failed_jobs, success_rate=$success_rate"
          echo "Debug: force-full=${{ inputs.force-full }}, frontend=${{ inputs.frontend-changed }}, backend=${{ inputs.backend-changed }}"
          
          echo "## 📊 Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: ${success_rate}% (${successful_jobs}/${total_jobs})" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Duration**: ~3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Fast Feedback**: ✅ Under 90 seconds" >> $GITHUB_STEP_SUMMARY
          
          # 质量门控：只要没有失败的作业就算通过
          if [ $failed_jobs -eq 0 ]; then
            echo "✅ **Quality Gate: PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Gate: FAILED** ($failed_jobs failures)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🎯 Quality Gate Decision
        if: always()
        run: |
          # 检查是否有实际的失败（不是跳过）
          failed_count=0
          
          [[ "${{ needs.frontend-quality.result }}" == "failure" ]] && ((failed_count++))
          [[ "${{ needs.typescript-check.result }}" == "failure" ]] && ((failed_count++))
          [[ "${{ needs.python-quality.result }}" == "failure" ]] && ((failed_count++))
          [[ "${{ needs.unit-tests-fast.result }}" == "failure" ]] && ((failed_count++))
          
          echo "Quality gate analysis:"
          echo "- Frontend Quality: ${{ needs.frontend-quality.result }}"
          echo "- TypeScript Check: ${{ needs.typescript-check.result }}"
          echo "- Python Quality: ${{ needs.python-quality.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests-fast.result }}"
          echo "- Failed jobs: $failed_count"
          
          if [ $failed_count -gt 0 ]; then
            echo "❌ Quality gate failed. Blocking pipeline progression."
            exit 1
          else
            echo "✅ Quality gate passed. Pipeline can continue."
          fi