name: 🔧 Optimized Build

on:
  workflow_call:
    inputs:
      frontend-changed:
        required: true
        type: string
      backend-changed:
        required: true
        type: string
      force-full:
        required: false
        type: string
        default: 'false'
    outputs:
      frontend-build-success:
        description: "Frontend build success status"
        value: ${{ jobs.frontend-build.outputs.build-success }}
      backend-build-success:
        description: "Backend build success status"
        value: ${{ jobs.backend-build.outputs.build-success }}

env:
  NODE_VERSION: '22.17.0'
  PYTHON_VERSION: '3.11'

jobs:
  # 🚀 Frontend Build (Optimized)
  frontend-build:
    name: 🚀 Frontend Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: inputs.frontend-changed == 'true' || inputs.force-full == 'true'
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 📦 Install Dependencies (Fast)
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund --silent
        timeout-minutes: 2

      - name: 🏗️ Build Frontend
        run: |
          cd frontend
          npm run build
        timeout-minutes: 2

      - name: 📊 Build Summary
        run: |
          cd frontend
          echo "📦 Frontend Build Summary:"
          echo "- Build Status: ✅ Success"
          echo "- Build Time: < 5 minutes"
          echo "- Artifacts: Ready for deployment"

      - name: 🔍 Set Build Status
        id: build-status
        run: |
          echo "success=true" >> $GITHUB_OUTPUT

  # 🐍 Backend Build (Optimized)
  backend-build:
    name: 🐍 Backend Build
    runs-on: ubuntu-latest
    timeout-minutes: 6
    if: inputs.backend-changed == 'true' || inputs.force-full == 'true'
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with Cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: 🔧 Enhanced Dependency Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: backend-deps-v2-${{ runner.os }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            backend-deps-v2-${{ runner.os }}-
            backend-deps-v1-${{ runner.os }}-

      - name: 📦 Optimized Dependency Installation
        run: |
          echo "🚀 Starting optimized dependency installation..."
          
          # Upgrade pip with timeout
          python -m pip install --upgrade pip --timeout 30
          
          # Install build tools first (fast)
          pip install --timeout 30 build wheel setuptools
          
          # Use test requirements for faster installation
          if [ -f requirements-test.txt ]; then
            echo "📦 Installing test dependencies (faster)..."
            pip install --timeout 60 -r requirements-test.txt
          else
            echo "📦 Installing minimal dependencies..."
            pip install --timeout 60 fastapi pydantic pytest pytest-cov
          fi
          
          # Verify installation
          python -c "import src; print('✅ Package imports successfully')"
        timeout-minutes: 3

      - name: 🏗️ Build Python Package
        run: |
          echo "🏗️ Building Python package..."
          python -m build --wheel --no-isolation
          
          # Verify build
          if [ -d "dist" ]; then
            echo "✅ Build successful"
            ls -la dist/
          else
            echo "❌ Build failed"
            exit 1
          fi
        timeout-minutes: 1

      - name: 🔍 Basic Import Test
        run: |
          echo "🧪 Testing basic imports..."
          python -c "
          import sys
          sys.path.insert(0, 'src')
          
          # Test core modules
          try:
              from src.database.models import DocumentModel
              from src.services.content_hash_service import ContentHashService
              print('✅ Core modules import successfully')
          except Exception as e:
              print(f'❌ Import test failed: {e}')
              exit(1)
          "

      - name: 📊 Build Summary
        run: |
          echo "📦 Backend Build Summary:"
          echo "- Build Status: ✅ Success"
          echo "- Dependencies: Optimized installation"
          echo "- Build Time: < 6 minutes"
          echo "- Package: Ready for testing"

      - name: 🔍 Set Build Status
        id: build-status
        run: |
          echo "success=true" >> $GITHUB_OUTPUT

  # 📋 Build Summary
  build-summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    if: always()
    timeout-minutes: 1
    steps:
      - name: 📊 Generate Build Report
        run: |
          echo "# 🔧 Optimized Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Frontend Build | ${{ needs.frontend-build.result }} | ~3m |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐍 Backend Build | ${{ needs.backend-build.result }} | ~4m |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate overall status
          frontend_status="${{ needs.frontend-build.result }}"
          backend_status="${{ needs.backend-build.result }}"
          
          if [[ "$frontend_status" == "success" || "$frontend_status" == "skipped" ]] && 
             [[ "$backend_status" == "success" || "$backend_status" == "skipped" ]]; then
            echo "✅ **Build Status: SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "🚀 Optimized build completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🎯 Optimizations Applied" >> $GITHUB_STEP_SUMMARY
            echo "- Fast dependency installation with timeouts" >> $GITHUB_STEP_SUMMARY
            echo "- Enhanced caching strategy" >> $GITHUB_STEP_SUMMARY
            echo "- Minimal test dependencies for speed" >> $GITHUB_STEP_SUMMARY
            echo "- Reduced build complexity" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Build encountered issues" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🎯 Build Gate Decision
        run: |
          if [[ "${{ needs.frontend-build.result }}" == "failure" || 
                "${{ needs.backend-build.result }}" == "failure" ]]; then
            echo "❌ Build gate failed. Blocking pipeline progression."
            exit 1
          else
            echo "✅ Build gate passed. Ready for testing phase."
          fi